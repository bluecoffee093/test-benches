
MotorTesting.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004050  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800417c  0800417c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004184  08004184  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004184  08004184  00014184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004188  08004188  00014188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800418c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000000c  08004198  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08004198  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1c7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ff3  00000000  00000000  0002e1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  000301f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b00  00000000  00000000  00030db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001476c  00000000  00000000  000318b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eb01  00000000  00000000  00046024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008058b  00000000  00000000  00054b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d50b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029dc  00000000  00000000  000d5100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080040f8 	.word	0x080040f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080040f8 	.word	0x080040f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fde1 	bl	8001074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f999 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 fb19 	bl	8000aec <MX_GPIO_Init>
  MX_RTC_Init();
 80004ba:	f000 fa0f 	bl	80008dc <MX_RTC_Init>
  MX_SPI1_Init();
 80004be:	f000 faad 	bl	8000a1c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80004c2:	f000 fae3 	bl	8000a8c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  int NMOS1=0,NMOS2=0,NMOS3=0,PMOS1=0,PMOS2=0,PMOS3=0;
 80004c6:	2300      	movs	r3, #0
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	2300      	movs	r3, #0
 80004cc:	613b      	str	r3, [r7, #16]
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	2300      	movs	r3, #0
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	2300      	movs	r3, #0
 80004dc:	603b      	str	r3, [r7, #0]
  /*Take Hall Sensor Readings*/
  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) H1 = 1;
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	019b      	lsls	r3, r3, #6
 80004e2:	4abb      	ldr	r2, [pc, #748]	; (80007d0 <main+0x328>)
 80004e4:	0019      	movs	r1, r3
 80004e6:	0010      	movs	r0, r2
 80004e8:	f001 f918 	bl	800171c <HAL_GPIO_ReadPin>
 80004ec:	1e03      	subs	r3, r0, #0
 80004ee:	d003      	beq.n	80004f8 <main+0x50>
 80004f0:	4bb8      	ldr	r3, [pc, #736]	; (80007d4 <main+0x32c>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	e002      	b.n	80004fe <main+0x56>
  else H1 = 0;
 80004f8:	4bb6      	ldr	r3, [pc, #728]	; (80007d4 <main+0x32c>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]

  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)) H2 = 1;
 80004fe:	2380      	movs	r3, #128	; 0x80
 8000500:	01db      	lsls	r3, r3, #7
 8000502:	4ab3      	ldr	r2, [pc, #716]	; (80007d0 <main+0x328>)
 8000504:	0019      	movs	r1, r3
 8000506:	0010      	movs	r0, r2
 8000508:	f001 f908 	bl	800171c <HAL_GPIO_ReadPin>
 800050c:	1e03      	subs	r3, r0, #0
 800050e:	d003      	beq.n	8000518 <main+0x70>
 8000510:	4bb1      	ldr	r3, [pc, #708]	; (80007d8 <main+0x330>)
 8000512:	2201      	movs	r2, #1
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	e002      	b.n	800051e <main+0x76>
  else H2 = 0;
 8000518:	4baf      	ldr	r3, [pc, #700]	; (80007d8 <main+0x330>)
 800051a:	2200      	movs	r2, #0
 800051c:	601a      	str	r2, [r3, #0]

  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) H3 = 1;
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	021b      	lsls	r3, r3, #8
 8000522:	4aab      	ldr	r2, [pc, #684]	; (80007d0 <main+0x328>)
 8000524:	0019      	movs	r1, r3
 8000526:	0010      	movs	r0, r2
 8000528:	f001 f8f8 	bl	800171c <HAL_GPIO_ReadPin>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d003      	beq.n	8000538 <main+0x90>
 8000530:	4baa      	ldr	r3, [pc, #680]	; (80007dc <main+0x334>)
 8000532:	2201      	movs	r2, #1
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	e002      	b.n	800053e <main+0x96>
  else H3 = 0;
 8000538:	4ba8      	ldr	r3, [pc, #672]	; (80007dc <main+0x334>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /*Get Direction*/
	  	  	if(HAL_GPIO_ReadPin(GPIOB, DIR_BUTTON_Pin)) dir = 1;
 800053e:	4ba4      	ldr	r3, [pc, #656]	; (80007d0 <main+0x328>)
 8000540:	2140      	movs	r1, #64	; 0x40
 8000542:	0018      	movs	r0, r3
 8000544:	f001 f8ea 	bl	800171c <HAL_GPIO_ReadPin>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d003      	beq.n	8000554 <main+0xac>
 800054c:	4ba4      	ldr	r3, [pc, #656]	; (80007e0 <main+0x338>)
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	e002      	b.n	800055a <main+0xb2>
	  	  	else dir = 0;
 8000554:	4ba2      	ldr	r3, [pc, #648]	; (80007e0 <main+0x338>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]

	  	  	/*Get Brake*/
	  	  	if(HAL_GPIO_ReadPin(GPIOB, BRAKE_BUTTON_Pin)) brake = 0;
 800055a:	4b9d      	ldr	r3, [pc, #628]	; (80007d0 <main+0x328>)
 800055c:	2104      	movs	r1, #4
 800055e:	0018      	movs	r0, r3
 8000560:	f001 f8dc 	bl	800171c <HAL_GPIO_ReadPin>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d003      	beq.n	8000570 <main+0xc8>
 8000568:	4b9e      	ldr	r3, [pc, #632]	; (80007e4 <main+0x33c>)
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	e002      	b.n	8000576 <main+0xce>
	  	  	else brake = 1;
 8000570:	4b9c      	ldr	r3, [pc, #624]	; (80007e4 <main+0x33c>)
 8000572:	2201      	movs	r2, #1
 8000574:	601a      	str	r2, [r3, #0]

	  	  	/* Commutation Table*/
	  	  	NMOS1 = (((!dir&&H1&&(!H2))||(dir&&(!H1)&&H2))||brake);
 8000576:	4b9a      	ldr	r3, [pc, #616]	; (80007e0 <main+0x338>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d107      	bne.n	800058e <main+0xe6>
 800057e:	4b95      	ldr	r3, [pc, #596]	; (80007d4 <main+0x32c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d003      	beq.n	800058e <main+0xe6>
 8000586:	4b94      	ldr	r3, [pc, #592]	; (80007d8 <main+0x330>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d00f      	beq.n	80005ae <main+0x106>
 800058e:	4b94      	ldr	r3, [pc, #592]	; (80007e0 <main+0x338>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d007      	beq.n	80005a6 <main+0xfe>
 8000596:	4b8f      	ldr	r3, [pc, #572]	; (80007d4 <main+0x32c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <main+0xfe>
 800059e:	4b8e      	ldr	r3, [pc, #568]	; (80007d8 <main+0x330>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d103      	bne.n	80005ae <main+0x106>
 80005a6:	4b8f      	ldr	r3, [pc, #572]	; (80007e4 <main+0x33c>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <main+0x10a>
 80005ae:	2301      	movs	r3, #1
 80005b0:	e000      	b.n	80005b4 <main+0x10c>
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
	  	  	PMOS1 = ((((dir)||(!H2)||H1)&&((!dir)||(!H1)||H2))||brake);
 80005b6:	4b8a      	ldr	r3, [pc, #552]	; (80007e0 <main+0x338>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d107      	bne.n	80005ce <main+0x126>
 80005be:	4b86      	ldr	r3, [pc, #536]	; (80007d8 <main+0x330>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d003      	beq.n	80005ce <main+0x126>
 80005c6:	4b83      	ldr	r3, [pc, #524]	; (80007d4 <main+0x32c>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d00b      	beq.n	80005e6 <main+0x13e>
 80005ce:	4b84      	ldr	r3, [pc, #528]	; (80007e0 <main+0x338>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d00b      	beq.n	80005ee <main+0x146>
 80005d6:	4b7f      	ldr	r3, [pc, #508]	; (80007d4 <main+0x32c>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d007      	beq.n	80005ee <main+0x146>
 80005de:	4b7e      	ldr	r3, [pc, #504]	; (80007d8 <main+0x330>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d103      	bne.n	80005ee <main+0x146>
 80005e6:	4b7f      	ldr	r3, [pc, #508]	; (80007e4 <main+0x33c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <main+0x14a>
 80005ee:	2301      	movs	r3, #1
 80005f0:	e000      	b.n	80005f4 <main+0x14c>
 80005f2:	2300      	movs	r3, #0
 80005f4:	60bb      	str	r3, [r7, #8]
	  	  	NMOS2 = (((!dir&&H2&&(!H3))||(dir&&(!H2)&&H3))||brake);
 80005f6:	4b7a      	ldr	r3, [pc, #488]	; (80007e0 <main+0x338>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d107      	bne.n	800060e <main+0x166>
 80005fe:	4b76      	ldr	r3, [pc, #472]	; (80007d8 <main+0x330>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d003      	beq.n	800060e <main+0x166>
 8000606:	4b75      	ldr	r3, [pc, #468]	; (80007dc <main+0x334>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00f      	beq.n	800062e <main+0x186>
 800060e:	4b74      	ldr	r3, [pc, #464]	; (80007e0 <main+0x338>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d007      	beq.n	8000626 <main+0x17e>
 8000616:	4b70      	ldr	r3, [pc, #448]	; (80007d8 <main+0x330>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d103      	bne.n	8000626 <main+0x17e>
 800061e:	4b6f      	ldr	r3, [pc, #444]	; (80007dc <main+0x334>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d103      	bne.n	800062e <main+0x186>
 8000626:	4b6f      	ldr	r3, [pc, #444]	; (80007e4 <main+0x33c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <main+0x18a>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <main+0x18c>
 8000632:	2300      	movs	r3, #0
 8000634:	613b      	str	r3, [r7, #16]
	  	  	PMOS2 = ((((dir)||(!H3)||H2)&&((!dir)||(!H2)||H3))||brake);
 8000636:	4b6a      	ldr	r3, [pc, #424]	; (80007e0 <main+0x338>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d107      	bne.n	800064e <main+0x1a6>
 800063e:	4b67      	ldr	r3, [pc, #412]	; (80007dc <main+0x334>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d003      	beq.n	800064e <main+0x1a6>
 8000646:	4b64      	ldr	r3, [pc, #400]	; (80007d8 <main+0x330>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00b      	beq.n	8000666 <main+0x1be>
 800064e:	4b64      	ldr	r3, [pc, #400]	; (80007e0 <main+0x338>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d00b      	beq.n	800066e <main+0x1c6>
 8000656:	4b60      	ldr	r3, [pc, #384]	; (80007d8 <main+0x330>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d007      	beq.n	800066e <main+0x1c6>
 800065e:	4b5f      	ldr	r3, [pc, #380]	; (80007dc <main+0x334>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d103      	bne.n	800066e <main+0x1c6>
 8000666:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <main+0x33c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <main+0x1ca>
 800066e:	2301      	movs	r3, #1
 8000670:	e000      	b.n	8000674 <main+0x1cc>
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
	  	  	NMOS3 = (((!dir&&H3&&(!H1))||(dir&&(!H3)&&H1))||brake);
 8000676:	4b5a      	ldr	r3, [pc, #360]	; (80007e0 <main+0x338>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d107      	bne.n	800068e <main+0x1e6>
 800067e:	4b57      	ldr	r3, [pc, #348]	; (80007dc <main+0x334>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d003      	beq.n	800068e <main+0x1e6>
 8000686:	4b53      	ldr	r3, [pc, #332]	; (80007d4 <main+0x32c>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d00f      	beq.n	80006ae <main+0x206>
 800068e:	4b54      	ldr	r3, [pc, #336]	; (80007e0 <main+0x338>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d007      	beq.n	80006a6 <main+0x1fe>
 8000696:	4b51      	ldr	r3, [pc, #324]	; (80007dc <main+0x334>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d103      	bne.n	80006a6 <main+0x1fe>
 800069e:	4b4d      	ldr	r3, [pc, #308]	; (80007d4 <main+0x32c>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d103      	bne.n	80006ae <main+0x206>
 80006a6:	4b4f      	ldr	r3, [pc, #316]	; (80007e4 <main+0x33c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <main+0x20a>
 80006ae:	2301      	movs	r3, #1
 80006b0:	e000      	b.n	80006b4 <main+0x20c>
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
	  	  	PMOS3 = ((((dir)||(!H1)||H3)&&((!dir)||(!H3)||H1))||brake);
 80006b6:	4b4a      	ldr	r3, [pc, #296]	; (80007e0 <main+0x338>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d107      	bne.n	80006ce <main+0x226>
 80006be:	4b45      	ldr	r3, [pc, #276]	; (80007d4 <main+0x32c>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d003      	beq.n	80006ce <main+0x226>
 80006c6:	4b45      	ldr	r3, [pc, #276]	; (80007dc <main+0x334>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d00b      	beq.n	80006e6 <main+0x23e>
 80006ce:	4b44      	ldr	r3, [pc, #272]	; (80007e0 <main+0x338>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d00b      	beq.n	80006ee <main+0x246>
 80006d6:	4b41      	ldr	r3, [pc, #260]	; (80007dc <main+0x334>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d007      	beq.n	80006ee <main+0x246>
 80006de:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <main+0x32c>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d103      	bne.n	80006ee <main+0x246>
 80006e6:	4b3f      	ldr	r3, [pc, #252]	; (80007e4 <main+0x33c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <main+0x24a>
 80006ee:	2301      	movs	r3, #1
 80006f0:	e000      	b.n	80006f4 <main+0x24c>
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]

	  	  	/*Send Signal to motor*/
	  	  	if(NMOS1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d008      	beq.n	800070e <main+0x266>
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	00d9      	lsls	r1, r3, #3
 8000700:	23a0      	movs	r3, #160	; 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2201      	movs	r2, #1
 8000706:	0018      	movs	r0, r3
 8000708:	f001 f825 	bl	8001756 <HAL_GPIO_WritePin>
 800070c:	e007      	b.n	800071e <main+0x276>
	  	  	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800070e:	2380      	movs	r3, #128	; 0x80
 8000710:	00d9      	lsls	r1, r3, #3
 8000712:	23a0      	movs	r3, #160	; 0xa0
 8000714:	05db      	lsls	r3, r3, #23
 8000716:	2200      	movs	r2, #0
 8000718:	0018      	movs	r0, r3
 800071a:	f001 f81c 	bl	8001756 <HAL_GPIO_WritePin>

	  	  	if(PMOS1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d006      	beq.n	8000732 <main+0x28a>
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <main+0x328>)
 8000726:	2201      	movs	r2, #1
 8000728:	2120      	movs	r1, #32
 800072a:	0018      	movs	r0, r3
 800072c:	f001 f813 	bl	8001756 <HAL_GPIO_WritePin>
 8000730:	e005      	b.n	800073e <main+0x296>
	  	  	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <main+0x328>)
 8000734:	2200      	movs	r2, #0
 8000736:	2120      	movs	r1, #32
 8000738:	0018      	movs	r0, r3
 800073a:	f001 f80c 	bl	8001756 <HAL_GPIO_WritePin>

	  	  	if(NMOS2) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800073e:	693b      	ldr	r3, [r7, #16]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d006      	beq.n	8000752 <main+0x2aa>
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <main+0x328>)
 8000746:	2201      	movs	r2, #1
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0018      	movs	r0, r3
 800074c:	f001 f803 	bl	8001756 <HAL_GPIO_WritePin>
 8000750:	e005      	b.n	800075e <main+0x2b6>
	  	  	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <main+0x328>)
 8000754:	2200      	movs	r2, #0
 8000756:	2180      	movs	r1, #128	; 0x80
 8000758:	0018      	movs	r0, r3
 800075a:	f000 fffc 	bl	8001756 <HAL_GPIO_WritePin>

	  	  	if(PMOS2) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d008      	beq.n	8000776 <main+0x2ce>
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	0059      	lsls	r1, r3, #1
 8000768:	23a0      	movs	r3, #160	; 0xa0
 800076a:	05db      	lsls	r3, r3, #23
 800076c:	2201      	movs	r2, #1
 800076e:	0018      	movs	r0, r3
 8000770:	f000 fff1 	bl	8001756 <HAL_GPIO_WritePin>
 8000774:	e007      	b.n	8000786 <main+0x2de>
	  	  	else HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000776:	2380      	movs	r3, #128	; 0x80
 8000778:	0059      	lsls	r1, r3, #1
 800077a:	23a0      	movs	r3, #160	; 0xa0
 800077c:	05db      	lsls	r3, r3, #23
 800077e:	2200      	movs	r2, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f000 ffe8 	bl	8001756 <HAL_GPIO_WritePin>

	  	  	if(NMOS3) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d007      	beq.n	800079c <main+0x2f4>
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	480f      	ldr	r0, [pc, #60]	; (80007d0 <main+0x328>)
 8000792:	2201      	movs	r2, #1
 8000794:	0019      	movs	r1, r3
 8000796:	f000 ffde 	bl	8001756 <HAL_GPIO_WritePin>
 800079a:	e006      	b.n	80007aa <main+0x302>
	  	  	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0x328>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	0019      	movs	r1, r3
 80007a6:	f000 ffd6 	bl	8001756 <HAL_GPIO_WritePin>

	  	  	if(PMOS3) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d007      	beq.n	80007c0 <main+0x318>
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	015b      	lsls	r3, r3, #5
 80007b4:	4806      	ldr	r0, [pc, #24]	; (80007d0 <main+0x328>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	0019      	movs	r1, r3
 80007ba:	f000 ffcc 	bl	8001756 <HAL_GPIO_WritePin>
 80007be:	e6be      	b.n	800053e <main+0x96>
	  	  	else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	015b      	lsls	r3, r3, #5
 80007c4:	4802      	ldr	r0, [pc, #8]	; (80007d0 <main+0x328>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	0019      	movs	r1, r3
 80007ca:	f000 ffc4 	bl	8001756 <HAL_GPIO_WritePin>
	  	  	if(HAL_GPIO_ReadPin(GPIOB, DIR_BUTTON_Pin)) dir = 1;
 80007ce:	e6b6      	b.n	800053e <main+0x96>
 80007d0:	50000400 	.word	0x50000400
 80007d4:	20000130 	.word	0x20000130
 80007d8:	20000134 	.word	0x20000134
 80007dc:	20000138 	.word	0x20000138
 80007e0:	20000128 	.word	0x20000128
 80007e4:	2000012c 	.word	0x2000012c

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b09d      	sub	sp, #116	; 0x74
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	2438      	movs	r4, #56	; 0x38
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2338      	movs	r3, #56	; 0x38
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f003 fc75 	bl	80040e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fe:	2324      	movs	r3, #36	; 0x24
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	0018      	movs	r0, r3
 8000804:	2314      	movs	r3, #20
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f003 fc6d 	bl	80040e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080e:	003b      	movs	r3, r7
 8000810:	0018      	movs	r0, r3
 8000812:	2324      	movs	r3, #36	; 0x24
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f003 fc66 	bl	80040e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800081c:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <SystemClock_Config+0xec>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a2d      	ldr	r2, [pc, #180]	; (80008d8 <SystemClock_Config+0xf0>)
 8000822:	401a      	ands	r2, r3
 8000824:	4b2b      	ldr	r3, [pc, #172]	; (80008d4 <SystemClock_Config+0xec>)
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	0109      	lsls	r1, r1, #4
 800082a:	430a      	orrs	r2, r1
 800082c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800082e:	0021      	movs	r1, r4
 8000830:	187b      	adds	r3, r7, r1
 8000832:	220a      	movs	r2, #10
 8000834:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2201      	movs	r2, #1
 800083a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2210      	movs	r2, #16
 8000840:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2201      	movs	r2, #1
 8000846:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000848:	187b      	adds	r3, r7, r1
 800084a:	2202      	movs	r2, #2
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2200      	movs	r2, #0
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_6;
 8000854:	187b      	adds	r3, r7, r1
 8000856:	2280      	movs	r2, #128	; 0x80
 8000858:	0312      	lsls	r2, r2, #12
 800085a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_3;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	0412      	lsls	r2, r2, #16
 8000862:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000864:	187b      	adds	r3, r7, r1
 8000866:	0018      	movs	r0, r3
 8000868:	f000 ffae 	bl	80017c8 <HAL_RCC_OscConfig>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000870:	f000 fa92 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000874:	2124      	movs	r1, #36	; 0x24
 8000876:	187b      	adds	r3, r7, r1
 8000878:	220f      	movs	r2, #15
 800087a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2203      	movs	r2, #3
 8000880:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2101      	movs	r1, #1
 8000898:	0018      	movs	r0, r3
 800089a:	f001 fb69 	bl	8001f70 <HAL_RCC_ClockConfig>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008a2:	f000 fa79 	bl	8000d98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_RTC;
 80008a6:	003b      	movs	r3, r7
 80008a8:	2222      	movs	r2, #34	; 0x22
 80008aa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ac:	003b      	movs	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80008b2:	003b      	movs	r3, r7
 80008b4:	2280      	movs	r2, #128	; 0x80
 80008b6:	0292      	lsls	r2, r2, #10
 80008b8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008ba:	003b      	movs	r3, r7
 80008bc:	0018      	movs	r0, r3
 80008be:	f001 fd7b 	bl	80023b8 <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80008c6:	f000 fa67 	bl	8000d98 <Error_Handler>
  }
}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	b01d      	add	sp, #116	; 0x74
 80008d0:	bd90      	pop	{r4, r7, pc}
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	40007000 	.word	0x40007000
 80008d8:	ffffe7ff 	.word	0xffffe7ff

080008dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b090      	sub	sp, #64	; 0x40
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008e2:	232c      	movs	r3, #44	; 0x2c
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	0018      	movs	r0, r3
 80008e8:	2314      	movs	r3, #20
 80008ea:	001a      	movs	r2, r3
 80008ec:	2100      	movs	r1, #0
 80008ee:	f003 fbfb 	bl	80040e8 <memset>
  RTC_DateTypeDef sDate = {0};
 80008f2:	2328      	movs	r3, #40	; 0x28
 80008f4:	18fb      	adds	r3, r7, r3
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80008fa:	003b      	movs	r3, r7
 80008fc:	0018      	movs	r0, r3
 80008fe:	2328      	movs	r3, #40	; 0x28
 8000900:	001a      	movs	r2, r3
 8000902:	2100      	movs	r1, #0
 8000904:	f003 fbf0 	bl	80040e8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000908:	4b41      	ldr	r3, [pc, #260]	; (8000a10 <MX_RTC_Init+0x134>)
 800090a:	4a42      	ldr	r2, [pc, #264]	; (8000a14 <MX_RTC_Init+0x138>)
 800090c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800090e:	4b40      	ldr	r3, [pc, #256]	; (8000a10 <MX_RTC_Init+0x134>)
 8000910:	2200      	movs	r2, #0
 8000912:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 31;
 8000914:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <MX_RTC_Init+0x134>)
 8000916:	221f      	movs	r2, #31
 8000918:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1023;
 800091a:	4b3d      	ldr	r3, [pc, #244]	; (8000a10 <MX_RTC_Init+0x134>)
 800091c:	4a3e      	ldr	r2, [pc, #248]	; (8000a18 <MX_RTC_Init+0x13c>)
 800091e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000920:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <MX_RTC_Init+0x134>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000926:	4b3a      	ldr	r3, [pc, #232]	; (8000a10 <MX_RTC_Init+0x134>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800092c:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <MX_RTC_Init+0x134>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000932:	4b37      	ldr	r3, [pc, #220]	; (8000a10 <MX_RTC_Init+0x134>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000938:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <MX_RTC_Init+0x134>)
 800093a:	0018      	movs	r0, r3
 800093c:	f001 fe92 	bl	8002664 <HAL_RTC_Init>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_RTC_Init+0x6c>
  {
    Error_Handler();
 8000944:	f000 fa28 	bl	8000d98 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000948:	212c      	movs	r1, #44	; 0x2c
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	2200      	movs	r2, #0
 8000954:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000956:	187b      	adds	r3, r7, r1
 8000958:	2200      	movs	r2, #0
 800095a:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800095c:	187b      	adds	r3, r7, r1
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000962:	187b      	adds	r3, r7, r1
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000968:	1879      	adds	r1, r7, r1
 800096a:	4b29      	ldr	r3, [pc, #164]	; (8000a10 <MX_RTC_Init+0x134>)
 800096c:	2200      	movs	r2, #0
 800096e:	0018      	movs	r0, r3
 8000970:	f001 ff16 	bl	80027a0 <HAL_RTC_SetTime>
 8000974:	1e03      	subs	r3, r0, #0
 8000976:	d001      	beq.n	800097c <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000978:	f000 fa0e 	bl	8000d98 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800097c:	2128      	movs	r1, #40	; 0x28
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2201      	movs	r2, #1
 8000982:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2201      	movs	r2, #1
 8000988:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2201      	movs	r2, #1
 800098e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2200      	movs	r2, #0
 8000994:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000996:	1879      	adds	r1, r7, r1
 8000998:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <MX_RTC_Init+0x134>)
 800099a:	2200      	movs	r2, #0
 800099c:	0018      	movs	r0, r3
 800099e:	f001 ffc3 	bl	8002928 <HAL_RTC_SetDate>
 80009a2:	1e03      	subs	r3, r0, #0
 80009a4:	d001      	beq.n	80009aa <MX_RTC_Init+0xce>
  {
    Error_Handler();
 80009a6:	f000 f9f7 	bl	8000d98 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80009aa:	003b      	movs	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0;
 80009b0:	003b      	movs	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0;
 80009b6:	003b      	movs	r3, r7
 80009b8:	2200      	movs	r2, #0
 80009ba:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 80009bc:	003b      	movs	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009c2:	003b      	movs	r3, r7
 80009c4:	2200      	movs	r2, #0
 80009c6:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009c8:	003b      	movs	r3, r7
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009ce:	003b      	movs	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 80009d4:	003b      	movs	r3, r7
 80009d6:	22f0      	movs	r2, #240	; 0xf0
 80009d8:	0512      	lsls	r2, r2, #20
 80009da:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009dc:	003b      	movs	r3, r7
 80009de:	2200      	movs	r2, #0
 80009e0:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 1;
 80009e2:	003b      	movs	r3, r7
 80009e4:	2220      	movs	r2, #32
 80009e6:	2101      	movs	r1, #1
 80009e8:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 80009ea:	003b      	movs	r3, r7
 80009ec:	2280      	movs	r2, #128	; 0x80
 80009ee:	0052      	lsls	r2, r2, #1
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80009f2:	0039      	movs	r1, r7
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_RTC_Init+0x134>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	0018      	movs	r0, r3
 80009fa:	f002 f843 	bl	8002a84 <HAL_RTC_SetAlarm_IT>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <MX_RTC_Init+0x12a>
  {
    Error_Handler();
 8000a02:	f000 f9c9 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	b010      	add	sp, #64	; 0x40
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000028 	.word	0x20000028
 8000a14:	40002800 	.word	0x40002800
 8000a18:	000003ff 	.word	0x000003ff

08000a1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a22:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <MX_SPI1_Init+0x6c>)
 8000a24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a26:	4b17      	ldr	r3, [pc, #92]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a28:	2282      	movs	r2, #130	; 0x82
 8000a2a:	0052      	lsls	r2, r2, #1
 8000a2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a34:	4b13      	ldr	r3, [pc, #76]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a40:	4b10      	ldr	r3, [pc, #64]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a48:	2280      	movs	r2, #128	; 0x80
 8000a4a:	0092      	lsls	r2, r2, #2
 8000a4c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a50:	2220      	movs	r2, #32
 8000a52:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a5a:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a68:	2207      	movs	r2, #7
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a6c:	4b05      	ldr	r3, [pc, #20]	; (8000a84 <MX_SPI1_Init+0x68>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f002 fa2c 	bl	8002ecc <HAL_SPI_Init>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000a78:	f000 f98e 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	2000004c 	.word	0x2000004c
 8000a88:	40013000 	.word	0x40013000

08000a8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000a92:	4a15      	ldr	r2, [pc, #84]	; (8000ae8 <MX_USART2_UART_Init+0x5c>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000a98:	22e1      	movs	r2, #225	; 0xe1
 8000a9a:	0252      	lsls	r2, r2, #9
 8000a9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <MX_USART2_UART_Init+0x58>)
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f002 fa8f 	bl	8002ff4 <HAL_UART_Init>
 8000ad6:	1e03      	subs	r3, r0, #0
 8000ad8:	d001      	beq.n	8000ade <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ada:	f000 f95d 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200000a4 	.word	0x200000a4
 8000ae8:	40004400 	.word	0x40004400

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	2414      	movs	r4, #20
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	0018      	movs	r0, r3
 8000af8:	2314      	movs	r3, #20
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f003 faf3 	bl	80040e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	4b76      	ldr	r3, [pc, #472]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b06:	4b75      	ldr	r3, [pc, #468]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b0e:	4b73      	ldr	r3, [pc, #460]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b70      	ldr	r3, [pc, #448]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b1e:	4b6f      	ldr	r3, [pc, #444]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b20:	2102      	movs	r1, #2
 8000b22:	430a      	orrs	r2, r1
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b26:	4b6d      	ldr	r3, [pc, #436]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b32:	4b6a      	ldr	r3, [pc, #424]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b36:	4b69      	ldr	r3, [pc, #420]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b38:	2104      	movs	r1, #4
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b3e:	4b67      	ldr	r3, [pc, #412]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b42:	2204      	movs	r2, #4
 8000b44:	4013      	ands	r3, r2
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b4a:	4b64      	ldr	r3, [pc, #400]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b4e:	4b63      	ldr	r3, [pc, #396]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	430a      	orrs	r2, r1
 8000b54:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b56:	4b61      	ldr	r3, [pc, #388]	; (8000cdc <MX_GPIO_Init+0x1f0>)
 8000b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b5a:	2280      	movs	r2, #128	; 0x80
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA15_RESERVED_Pin|PA12_RESERVED_Pin|GPIO_PIN_10|GPIO_PIN_8
 8000b62:	495f      	ldr	r1, [pc, #380]	; (8000ce0 <MX_GPIO_Init+0x1f4>)
 8000b64:	23a0      	movs	r3, #160	; 0xa0
 8000b66:	05db      	lsls	r3, r3, #23
 8000b68:	2200      	movs	r2, #0
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fdf3 	bl	8001756 <HAL_GPIO_WritePin>
                          |PA1_RESERVED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);
 8000b70:	2395      	movs	r3, #149	; 0x95
 8000b72:	015b      	lsls	r3, r3, #5
 8000b74:	485b      	ldr	r0, [pc, #364]	; (8000ce4 <MX_GPIO_Init+0x1f8>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	0019      	movs	r1, r3
 8000b7a:	f000 fdec 	bl	8001756 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin, GPIO_PIN_RESET);
 8000b7e:	4b5a      	ldr	r3, [pc, #360]	; (8000ce8 <MX_GPIO_Init+0x1fc>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	2107      	movs	r1, #7
 8000b84:	0018      	movs	r0, r3
 8000b86:	f000 fde6 	bl	8001756 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA15_RESERVED_Pin PA12_RESERVED_Pin PA1_RESERVED_Pin */
  GPIO_InitStruct.Pin = PA15_RESERVED_Pin|PA12_RESERVED_Pin|PA1_RESERVED_Pin;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	4a57      	ldr	r2, [pc, #348]	; (8000cec <MX_GPIO_Init+0x200>)
 8000b8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	2201      	movs	r2, #1
 8000b94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	193a      	adds	r2, r7, r4
 8000ba4:	23a0      	movs	r3, #160	; 0xa0
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	0011      	movs	r1, r2
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 fc38 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB9 PB7 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_9|GPIO_PIN_7|GPIO_PIN_12;
 8000bb0:	0021      	movs	r1, r4
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2295      	movs	r2, #149	; 0x95
 8000bb6:	0152      	lsls	r2, r2, #5
 8000bb8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	000c      	movs	r4, r1
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	193b      	adds	r3, r7, r4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	4a44      	ldr	r2, [pc, #272]	; (8000ce4 <MX_GPIO_Init+0x1f8>)
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	0010      	movs	r0, r2
 8000bd6:	f000 fc23 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4_RESERVED_Pin PB1_RESERVED_Pin PB0_RESERVED_Pin */
  GPIO_InitStruct.Pin = PB4_RESERVED_Pin|PB1_RESERVED_Pin|PB0_RESERVED_Pin;
 8000bda:	0021      	movs	r1, r4
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2213      	movs	r2, #19
 8000be0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2288      	movs	r2, #136	; 0x88
 8000be6:	0352      	lsls	r2, r2, #13
 8000be8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	000c      	movs	r4, r1
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	4a3b      	ldr	r2, [pc, #236]	; (8000ce4 <MX_GPIO_Init+0x1f8>)
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	0010      	movs	r0, r2
 8000bfa:	f000 fc11 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_BUTTON_Pin BRAKE_BUTTON_Pin */
  GPIO_InitStruct.Pin = DIR_BUTTON_Pin|BRAKE_BUTTON_Pin;
 8000bfe:	193b      	adds	r3, r7, r4
 8000c00:	2244      	movs	r2, #68	; 0x44
 8000c02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	4a34      	ldr	r2, [pc, #208]	; (8000ce4 <MX_GPIO_Init+0x1f8>)
 8000c14:	0019      	movs	r1, r3
 8000c16:	0010      	movs	r0, r2
 8000c18:	f000 fc02 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_8;
 8000c1c:	0021      	movs	r1, r4
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	22a0      	movs	r2, #160	; 0xa0
 8000c22:	00d2      	lsls	r2, r2, #3
 8000c24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	000c      	movs	r4, r1
 8000c28:	193b      	adds	r3, r7, r4
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	193b      	adds	r3, r7, r4
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	193b      	adds	r3, r7, r4
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	193a      	adds	r2, r7, r4
 8000c3c:	23a0      	movs	r3, #160	; 0xa0
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	0011      	movs	r1, r2
 8000c42:	0018      	movs	r0, r3
 8000c44:	f000 fbec 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1_RESERVED_Pin PC0_RESERVED_Pin PC2_RESERVED_Pin */
  GPIO_InitStruct.Pin = PC1_RESERVED_Pin|PC0_RESERVED_Pin|PC2_RESERVED_Pin;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2207      	movs	r2, #7
 8000c4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2201      	movs	r2, #1
 8000c52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <MX_GPIO_Init+0x1fc>)
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	f000 fbda 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB15 PB14 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13;
 8000c6c:	0021      	movs	r1, r4
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	22e0      	movs	r2, #224	; 0xe0
 8000c72:	0212      	lsls	r2, r2, #8
 8000c74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	22c4      	movs	r2, #196	; 0xc4
 8000c7a:	0392      	lsls	r2, r2, #14
 8000c7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7e:	187b      	adds	r3, r7, r1
 8000c80:	2201      	movs	r2, #1
 8000c82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c84:	000c      	movs	r4, r1
 8000c86:	187b      	adds	r3, r7, r1
 8000c88:	4a16      	ldr	r2, [pc, #88]	; (8000ce4 <MX_GPIO_Init+0x1f8>)
 8000c8a:	0019      	movs	r1, r3
 8000c8c:	0010      	movs	r0, r2
 8000c8e:	f000 fbc7 	bl	8001420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c92:	0021      	movs	r1, r4
 8000c94:	187b      	adds	r3, r7, r1
 8000c96:	2210      	movs	r2, #16
 8000c98:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c9a:	187b      	adds	r3, r7, r1
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca6:	187a      	adds	r2, r7, r1
 8000ca8:	23a0      	movs	r3, #160	; 0xa0
 8000caa:	05db      	lsls	r3, r3, #23
 8000cac:	0011      	movs	r1, r2
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 fbb6 	bl	8001420 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2005      	movs	r0, #5
 8000cba:	f000 faf7 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000cbe:	2005      	movs	r0, #5
 8000cc0:	f000 fb09 	bl	80012d6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2007      	movs	r0, #7
 8000cca:	f000 faef 	bl	80012ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000cce:	2007      	movs	r0, #7
 8000cd0:	f000 fb01 	bl	80012d6 <HAL_NVIC_EnableIRQ>

}
 8000cd4:	46c0      	nop			; (mov r8, r8)
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b00b      	add	sp, #44	; 0x2c
 8000cda:	bd90      	pop	{r4, r7, pc}
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	00009502 	.word	0x00009502
 8000ce4:	50000400 	.word	0x50000400
 8000ce8:	50000800 	.word	0x50000800
 8000cec:	00009002 	.word	0x00009002

08000cf0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

/*Interrupt Callback Function*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	0002      	movs	r2, r0
 8000cf8:	1dbb      	adds	r3, r7, #6
 8000cfa:	801a      	strh	r2, [r3, #0]

	if(GPIO_Pin == GPIO_PIN_13){
 8000cfc:	1dbb      	adds	r3, r7, #6
 8000cfe:	881a      	ldrh	r2, [r3, #0]
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	019b      	lsls	r3, r3, #6
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d10f      	bne.n	8000d28 <HAL_GPIO_EXTI_Callback+0x38>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13)) H1 = 1;
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	019b      	lsls	r3, r3, #6
 8000d0c:	4a1e      	ldr	r2, [pc, #120]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x98>)
 8000d0e:	0019      	movs	r1, r3
 8000d10:	0010      	movs	r0, r2
 8000d12:	f000 fd03 	bl	800171c <HAL_GPIO_ReadPin>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d003      	beq.n	8000d22 <HAL_GPIO_EXTI_Callback+0x32>
 8000d1a:	4b1c      	ldr	r3, [pc, #112]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	e002      	b.n	8000d28 <HAL_GPIO_EXTI_Callback+0x38>
		else H1 = 0;
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x9c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_14){
 8000d28:	1dbb      	adds	r3, r7, #6
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	01db      	lsls	r3, r3, #7
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d10f      	bne.n	8000d54 <HAL_GPIO_EXTI_Callback+0x64>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14)) H2 = 1;
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	01db      	lsls	r3, r3, #7
 8000d38:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x98>)
 8000d3a:	0019      	movs	r1, r3
 8000d3c:	0010      	movs	r0, r2
 8000d3e:	f000 fced 	bl	800171c <HAL_GPIO_ReadPin>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_EXTI_Callback+0x5e>
 8000d46:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e002      	b.n	8000d54 <HAL_GPIO_EXTI_Callback+0x64>
		else H2 = 0;
 8000d4e:	4b10      	ldr	r3, [pc, #64]	; (8000d90 <HAL_GPIO_EXTI_Callback+0xa0>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
	}

	if(GPIO_Pin == GPIO_PIN_15){
 8000d54:	1dbb      	adds	r3, r7, #6
 8000d56:	881a      	ldrh	r2, [r3, #0]
 8000d58:	2380      	movs	r3, #128	; 0x80
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d10f      	bne.n	8000d80 <HAL_GPIO_EXTI_Callback+0x90>
		if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) H3 = 1;
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	021b      	lsls	r3, r3, #8
 8000d64:	4a08      	ldr	r2, [pc, #32]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x98>)
 8000d66:	0019      	movs	r1, r3
 8000d68:	0010      	movs	r0, r2
 8000d6a:	f000 fcd7 	bl	800171c <HAL_GPIO_ReadPin>
 8000d6e:	1e03      	subs	r3, r0, #0
 8000d70:	d003      	beq.n	8000d7a <HAL_GPIO_EXTI_Callback+0x8a>
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	601a      	str	r2, [r3, #0]
		else H3 = 0;
	}
}
 8000d78:	e002      	b.n	8000d80 <HAL_GPIO_EXTI_Callback+0x90>
		else H3 = 0;
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_GPIO_EXTI_Callback+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b002      	add	sp, #8
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	50000400 	.word	0x50000400
 8000d8c:	20000130 	.word	0x20000130
 8000d90:	20000134 	.word	0x20000134
 8000d94:	20000138 	.word	0x20000138

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x8>
	...

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_MspInit+0x24>)
 8000daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x24>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	430a      	orrs	r2, r1
 8000db2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	4b04      	ldr	r3, [pc, #16]	; (8000dc8 <HAL_MspInit+0x24>)
 8000db6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000db8:	4b03      	ldr	r3, [pc, #12]	; (8000dc8 <HAL_MspInit+0x24>)
 8000dba:	2180      	movs	r1, #128	; 0x80
 8000dbc:	0549      	lsls	r1, r1, #21
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40021000 	.word	0x40021000

08000dcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <HAL_RTC_MspInit+0x38>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d10e      	bne.n	8000dfc <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <HAL_RTC_MspInit+0x3c>)
 8000de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_RTC_MspInit+0x3c>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	02c9      	lsls	r1, r1, #11
 8000de8:	430a      	orrs	r2, r1
 8000dea:	651a      	str	r2, [r3, #80]	; 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	2002      	movs	r0, #2
 8000df2:	f000 fa5b 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f000 fa6d 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b002      	add	sp, #8
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40002800 	.word	0x40002800
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e0c:	b590      	push	{r4, r7, lr}
 8000e0e:	b08b      	sub	sp, #44	; 0x2c
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	2414      	movs	r4, #20
 8000e16:	193b      	adds	r3, r7, r4
 8000e18:	0018      	movs	r0, r3
 8000e1a:	2314      	movs	r3, #20
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	2100      	movs	r1, #0
 8000e20:	f003 f962 	bl	80040e8 <memset>
  if(hspi->Instance==SPI1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a28      	ldr	r2, [pc, #160]	; (8000ecc <HAL_SPI_MspInit+0xc0>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d14a      	bne.n	8000ec4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2e:	4b28      	ldr	r3, [pc, #160]	; (8000ed0 <HAL_SPI_MspInit+0xc4>)
 8000e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e32:	4b27      	ldr	r3, [pc, #156]	; (8000ed0 <HAL_SPI_MspInit+0xc4>)
 8000e34:	2180      	movs	r1, #128	; 0x80
 8000e36:	0149      	lsls	r1, r1, #5
 8000e38:	430a      	orrs	r2, r1
 8000e3a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	4b24      	ldr	r3, [pc, #144]	; (8000ed0 <HAL_SPI_MspInit+0xc4>)
 8000e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e40:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <HAL_SPI_MspInit+0xc4>)
 8000e42:	2102      	movs	r1, #2
 8000e44:	430a      	orrs	r2, r1
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <HAL_SPI_MspInit+0xc4>)
 8000e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
 8000e52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e54:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <HAL_SPI_MspInit+0xc4>)
 8000e56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_SPI_MspInit+0xc4>)
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	430a      	orrs	r2, r1
 8000e5e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <HAL_SPI_MspInit+0xc4>)
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	2201      	movs	r2, #1
 8000e66:	4013      	ands	r3, r2
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = PB3_RESERVED_Pin;
 8000e6c:	193b      	adds	r3, r7, r4
 8000e6e:	2208      	movs	r2, #8
 8000e70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	2202      	movs	r2, #2
 8000e76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	193b      	adds	r3, r7, r4
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	2203      	movs	r2, #3
 8000e82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PB3_RESERVED_GPIO_Port, &GPIO_InitStruct);
 8000e8a:	193b      	adds	r3, r7, r4
 8000e8c:	4a11      	ldr	r2, [pc, #68]	; (8000ed4 <HAL_SPI_MspInit+0xc8>)
 8000e8e:	0019      	movs	r1, r3
 8000e90:	0010      	movs	r0, r2
 8000e92:	f000 fac5 	bl	8001420 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PA7_RESERVED_Pin|PA6_RESERVED_Pin;
 8000e96:	0021      	movs	r1, r4
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	22c0      	movs	r2, #192	; 0xc0
 8000e9c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2202      	movs	r2, #2
 8000ea2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	2203      	movs	r2, #3
 8000eae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000eb0:	187b      	adds	r3, r7, r1
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb6:	187a      	adds	r2, r7, r1
 8000eb8:	23a0      	movs	r3, #160	; 0xa0
 8000eba:	05db      	lsls	r3, r3, #23
 8000ebc:	0011      	movs	r1, r2
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f000 faae 	bl	8001420 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ec4:	46c0      	nop			; (mov r8, r8)
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	b00b      	add	sp, #44	; 0x2c
 8000eca:	bd90      	pop	{r4, r7, pc}
 8000ecc:	40013000 	.word	0x40013000
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	50000400 	.word	0x50000400

08000ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b089      	sub	sp, #36	; 0x24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	240c      	movs	r4, #12
 8000ee2:	193b      	adds	r3, r7, r4
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	2314      	movs	r3, #20
 8000ee8:	001a      	movs	r2, r3
 8000eea:	2100      	movs	r1, #0
 8000eec:	f003 f8fc 	bl	80040e8 <memset>
  if(huart->Instance==USART2)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	; (8000f68 <HAL_UART_MspInit+0x90>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d131      	bne.n	8000f5e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000efa:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	0289      	lsls	r1, r1, #10
 8000f04:	430a      	orrs	r2, r1
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	4b18      	ldr	r3, [pc, #96]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	430a      	orrs	r2, r1
 8000f12:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_UART_MspInit+0x94>)
 8000f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f18:	2201      	movs	r2, #1
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	60bb      	str	r3, [r7, #8]
 8000f1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f20:	0021      	movs	r1, r4
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	220c      	movs	r2, #12
 8000f26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2200      	movs	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2203      	movs	r2, #3
 8000f38:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	187a      	adds	r2, r7, r1
 8000f42:	23a0      	movs	r3, #160	; 0xa0
 8000f44:	05db      	lsls	r3, r3, #23
 8000f46:	0011      	movs	r1, r2
 8000f48:	0018      	movs	r0, r3
 8000f4a:	f000 fa69 	bl	8001420 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	201c      	movs	r0, #28
 8000f54:	f000 f9aa 	bl	80012ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f58:	201c      	movs	r0, #28
 8000f5a:	f000 f9bc 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f5e:	46c0      	nop			; (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b009      	add	sp, #36	; 0x24
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	40004400 	.word	0x40004400
 8000f6c:	40021000 	.word	0x40021000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f80:	46c0      	nop			; (mov r8, r8)
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f94:	f000 f8c2 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <RTC_IRQHandler+0x14>)
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f001 feb8 	bl	8002d1c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	20000028 	.word	0x20000028

08000fb8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_RESERVED_Pin);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 fbe7 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(PB1_RESERVED_Pin);
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f000 fbe4 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000fc8:	46c0      	nop			; (mov r8, r8)
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB4_RESERVED_Pin);
 8000fd2:	2010      	movs	r0, #16
 8000fd4:	f000 fbdc 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000fd8:	2380      	movs	r3, #128	; 0x80
 8000fda:	019b      	lsls	r3, r3, #6
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f000 fbd7 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	01db      	lsls	r3, r3, #7
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 fbd2 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	f000 fbcd 	bl	8001790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <USART2_IRQHandler+0x14>)
 8001002:	0018      	movs	r0, r3
 8001004:	f002 f84a 	bl	800309c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	200000a4 	.word	0x200000a4

08001014 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
	...

08001020 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001022:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <LoopForever+0x6>)
  ldr r1, =_edata
 8001026:	490e      	ldr	r1, [pc, #56]	; (8001060 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001028:	4a0e      	ldr	r2, [pc, #56]	; (8001064 <LoopForever+0xe>)
  movs r3, #0
 800102a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800102c:	e002      	b.n	8001034 <LoopCopyDataInit>

0800102e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001030:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001032:	3304      	adds	r3, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001034:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001036:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001038:	d3f9      	bcc.n	800102e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800103a:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <LoopForever+0x12>)
  ldr r4, =_ebss
 800103c:	4c0b      	ldr	r4, [pc, #44]	; (800106c <LoopForever+0x16>)
  movs r3, #0
 800103e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001040:	e001      	b.n	8001046 <LoopFillZerobss>

08001042 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001042:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001044:	3204      	adds	r2, #4

08001046 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001046:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001048:	d3fb      	bcc.n	8001042 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800104a:	f7ff ffe3 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104e:	f003 f827 	bl	80040a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001052:	f7ff fa29 	bl	80004a8 <main>

08001056 <LoopForever>:

LoopForever:
    b LoopForever
 8001056:	e7fe      	b.n	8001056 <LoopForever>
   ldr   r0, =_estack
 8001058:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800105c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001060:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001064:	0800418c 	.word	0x0800418c
  ldr r2, =_sbss
 8001068:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800106c:	20000140 	.word	0x20000140

08001070 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001070:	e7fe      	b.n	8001070 <ADC1_COMP_IRQHandler>
	...

08001074 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	2200      	movs	r2, #0
 800107e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001080:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <HAL_Init+0x3c>)
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_Init+0x3c>)
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	430a      	orrs	r2, r1
 800108a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108c:	2000      	movs	r0, #0
 800108e:	f000 f811 	bl	80010b4 <HAL_InitTick>
 8001092:	1e03      	subs	r3, r0, #0
 8001094:	d003      	beq.n	800109e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	2201      	movs	r2, #1
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	e001      	b.n	80010a2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800109e:	f7ff fe81 	bl	8000da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010a2:	1dfb      	adds	r3, r7, #7
 80010a4:	781b      	ldrb	r3, [r3, #0]
}
 80010a6:	0018      	movs	r0, r3
 80010a8:	46bd      	mov	sp, r7
 80010aa:	b002      	add	sp, #8
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	40022000 	.word	0x40022000

080010b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b4:	b590      	push	{r4, r7, lr}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_InitTick+0x5c>)
 80010be:	681c      	ldr	r4, [r3, #0]
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_InitTick+0x60>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	0019      	movs	r1, r3
 80010c6:	23fa      	movs	r3, #250	; 0xfa
 80010c8:	0098      	lsls	r0, r3, #2
 80010ca:	f7ff f81d 	bl	8000108 <__udivsi3>
 80010ce:	0003      	movs	r3, r0
 80010d0:	0019      	movs	r1, r3
 80010d2:	0020      	movs	r0, r4
 80010d4:	f7ff f818 	bl	8000108 <__udivsi3>
 80010d8:	0003      	movs	r3, r0
 80010da:	0018      	movs	r0, r3
 80010dc:	f000 f90b 	bl	80012f6 <HAL_SYSTICK_Config>
 80010e0:	1e03      	subs	r3, r0, #0
 80010e2:	d001      	beq.n	80010e8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e00f      	b.n	8001108 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d80b      	bhi.n	8001106 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	2301      	movs	r3, #1
 80010f2:	425b      	negs	r3, r3
 80010f4:	2200      	movs	r2, #0
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 f8d8 	bl	80012ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_InitTick+0x64>)
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b003      	add	sp, #12
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000008 	.word	0x20000008
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x1c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	001a      	movs	r2, r3
 8001126:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x20>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	18d2      	adds	r2, r2, r3
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_IncTick+0x20>)
 800112e:	601a      	str	r2, [r3, #0]
}
 8001130:	46c0      	nop			; (mov r8, r8)
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	20000008 	.word	0x20000008
 800113c:	2000013c 	.word	0x2000013c

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b02      	ldr	r3, [pc, #8]	; (8001150 <HAL_GetTick+0x10>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	0018      	movs	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			; (mov r8, r8)
 8001150:	2000013c 	.word	0x2000013c

08001154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	0002      	movs	r2, r0
 800115c:	1dfb      	adds	r3, r7, #7
 800115e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001160:	1dfb      	adds	r3, r7, #7
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b7f      	cmp	r3, #127	; 0x7f
 8001166:	d809      	bhi.n	800117c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001168:	1dfb      	adds	r3, r7, #7
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	001a      	movs	r2, r3
 800116e:	231f      	movs	r3, #31
 8001170:	401a      	ands	r2, r3
 8001172:	4b04      	ldr	r3, [pc, #16]	; (8001184 <__NVIC_EnableIRQ+0x30>)
 8001174:	2101      	movs	r1, #1
 8001176:	4091      	lsls	r1, r2
 8001178:	000a      	movs	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
  }
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	b002      	add	sp, #8
 8001182:	bd80      	pop	{r7, pc}
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b590      	push	{r4, r7, lr}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	0002      	movs	r2, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	1dfb      	adds	r3, r7, #7
 8001194:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001196:	1dfb      	adds	r3, r7, #7
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b7f      	cmp	r3, #127	; 0x7f
 800119c:	d828      	bhi.n	80011f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119e:	4a2f      	ldr	r2, [pc, #188]	; (800125c <__NVIC_SetPriority+0xd4>)
 80011a0:	1dfb      	adds	r3, r7, #7
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	b25b      	sxtb	r3, r3
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	33c0      	adds	r3, #192	; 0xc0
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	589b      	ldr	r3, [r3, r2]
 80011ae:	1dfa      	adds	r2, r7, #7
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	0011      	movs	r1, r2
 80011b4:	2203      	movs	r2, #3
 80011b6:	400a      	ands	r2, r1
 80011b8:	00d2      	lsls	r2, r2, #3
 80011ba:	21ff      	movs	r1, #255	; 0xff
 80011bc:	4091      	lsls	r1, r2
 80011be:	000a      	movs	r2, r1
 80011c0:	43d2      	mvns	r2, r2
 80011c2:	401a      	ands	r2, r3
 80011c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	019b      	lsls	r3, r3, #6
 80011ca:	22ff      	movs	r2, #255	; 0xff
 80011cc:	401a      	ands	r2, r3
 80011ce:	1dfb      	adds	r3, r7, #7
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	0018      	movs	r0, r3
 80011d4:	2303      	movs	r3, #3
 80011d6:	4003      	ands	r3, r0
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011dc:	481f      	ldr	r0, [pc, #124]	; (800125c <__NVIC_SetPriority+0xd4>)
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	430a      	orrs	r2, r1
 80011e8:	33c0      	adds	r3, #192	; 0xc0
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011ee:	e031      	b.n	8001254 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f0:	4a1b      	ldr	r2, [pc, #108]	; (8001260 <__NVIC_SetPriority+0xd8>)
 80011f2:	1dfb      	adds	r3, r7, #7
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	0019      	movs	r1, r3
 80011f8:	230f      	movs	r3, #15
 80011fa:	400b      	ands	r3, r1
 80011fc:	3b08      	subs	r3, #8
 80011fe:	089b      	lsrs	r3, r3, #2
 8001200:	3306      	adds	r3, #6
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	18d3      	adds	r3, r2, r3
 8001206:	3304      	adds	r3, #4
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	1dfa      	adds	r2, r7, #7
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	0011      	movs	r1, r2
 8001210:	2203      	movs	r2, #3
 8001212:	400a      	ands	r2, r1
 8001214:	00d2      	lsls	r2, r2, #3
 8001216:	21ff      	movs	r1, #255	; 0xff
 8001218:	4091      	lsls	r1, r2
 800121a:	000a      	movs	r2, r1
 800121c:	43d2      	mvns	r2, r2
 800121e:	401a      	ands	r2, r3
 8001220:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	019b      	lsls	r3, r3, #6
 8001226:	22ff      	movs	r2, #255	; 0xff
 8001228:	401a      	ands	r2, r3
 800122a:	1dfb      	adds	r3, r7, #7
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	0018      	movs	r0, r3
 8001230:	2303      	movs	r3, #3
 8001232:	4003      	ands	r3, r0
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001238:	4809      	ldr	r0, [pc, #36]	; (8001260 <__NVIC_SetPriority+0xd8>)
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	001c      	movs	r4, r3
 8001240:	230f      	movs	r3, #15
 8001242:	4023      	ands	r3, r4
 8001244:	3b08      	subs	r3, #8
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	430a      	orrs	r2, r1
 800124a:	3306      	adds	r3, #6
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	18c3      	adds	r3, r0, r3
 8001250:	3304      	adds	r3, #4
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	46c0      	nop			; (mov r8, r8)
 8001256:	46bd      	mov	sp, r7
 8001258:	b003      	add	sp, #12
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	e000e100 	.word	0xe000e100
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1e5a      	subs	r2, r3, #1
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	045b      	lsls	r3, r3, #17
 8001274:	429a      	cmp	r2, r3
 8001276:	d301      	bcc.n	800127c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001278:	2301      	movs	r3, #1
 800127a:	e010      	b.n	800129e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127c:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <SysTick_Config+0x44>)
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	3a01      	subs	r2, #1
 8001282:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001284:	2301      	movs	r3, #1
 8001286:	425b      	negs	r3, r3
 8001288:	2103      	movs	r1, #3
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff ff7c 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <SysTick_Config+0x44>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001296:	4b04      	ldr	r3, [pc, #16]	; (80012a8 <SysTick_Config+0x44>)
 8001298:	2207      	movs	r2, #7
 800129a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800129c:	2300      	movs	r3, #0
}
 800129e:	0018      	movs	r0, r3
 80012a0:	46bd      	mov	sp, r7
 80012a2:	b002      	add	sp, #8
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	e000e010 	.word	0xe000e010

080012ac <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	210f      	movs	r1, #15
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	1c02      	adds	r2, r0, #0
 80012bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	b25b      	sxtb	r3, r3
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f7ff ff5d 	bl	8001188 <__NVIC_SetPriority>
}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b004      	add	sp, #16
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	0002      	movs	r2, r0
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	b25b      	sxtb	r3, r3
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff ff33 	bl	8001154 <__NVIC_EnableIRQ>
}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b002      	add	sp, #8
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b082      	sub	sp, #8
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	0018      	movs	r0, r3
 8001302:	f7ff ffaf 	bl	8001264 <SysTick_Config>
 8001306:	0003      	movs	r3, r0
}
 8001308:	0018      	movs	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	b002      	add	sp, #8
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001318:	230f      	movs	r3, #15
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2225      	movs	r2, #37	; 0x25
 8001324:	5c9b      	ldrb	r3, [r3, r2]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d008      	beq.n	800133e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2204      	movs	r2, #4
 8001330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2224      	movs	r2, #36	; 0x24
 8001336:	2100      	movs	r1, #0
 8001338:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e024      	b.n	8001388 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	210e      	movs	r1, #14
 800134a:	438a      	bics	r2, r1
 800134c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2101      	movs	r1, #1
 800135a:	438a      	bics	r2, r1
 800135c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	221c      	movs	r2, #28
 8001364:	401a      	ands	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	2101      	movs	r1, #1
 800136c:	4091      	lsls	r1, r2
 800136e:	000a      	movs	r2, r1
 8001370:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2225      	movs	r2, #37	; 0x25
 8001376:	2101      	movs	r1, #1
 8001378:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2224      	movs	r2, #36	; 0x24
 800137e:	2100      	movs	r1, #0
 8001380:	5499      	strb	r1, [r3, r2]

    return status;
 8001382:	230f      	movs	r3, #15
 8001384:	18fb      	adds	r3, r7, r3
 8001386:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001388:	0018      	movs	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	b004      	add	sp, #16
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001398:	210f      	movs	r1, #15
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2225      	movs	r2, #37	; 0x25
 80013a4:	5c9b      	ldrb	r3, [r3, r2]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d006      	beq.n	80013ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2204      	movs	r2, #4
 80013b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e02a      	b.n	8001410 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	210e      	movs	r1, #14
 80013c6:	438a      	bics	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	438a      	bics	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	221c      	movs	r2, #28
 80013e0:	401a      	ands	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	2101      	movs	r1, #1
 80013e8:	4091      	lsls	r1, r2
 80013ea:	000a      	movs	r2, r1
 80013ec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2225      	movs	r2, #37	; 0x25
 80013f2:	2101      	movs	r1, #1
 80013f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2224      	movs	r2, #36	; 0x24
 80013fa:	2100      	movs	r1, #0
 80013fc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001402:	2b00      	cmp	r3, #0
 8001404:	d004      	beq.n	8001410 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	0010      	movs	r0, r2
 800140e:	4798      	blx	r3
    }
  }
  return status;
 8001410:	230f      	movs	r3, #15
 8001412:	18fb      	adds	r3, r7, r3
 8001414:	781b      	ldrb	r3, [r3, #0]
}
 8001416:	0018      	movs	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	b004      	add	sp, #16
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001436:	e155      	b.n	80016e4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2101      	movs	r1, #1
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4091      	lsls	r1, r2
 8001442:	000a      	movs	r2, r1
 8001444:	4013      	ands	r3, r2
 8001446:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d100      	bne.n	8001450 <HAL_GPIO_Init+0x30>
 800144e:	e146      	b.n	80016de <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2203      	movs	r2, #3
 8001456:	4013      	ands	r3, r2
 8001458:	2b01      	cmp	r3, #1
 800145a:	d005      	beq.n	8001468 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001464:	2b02      	cmp	r3, #2
 8001466:	d130      	bne.n	80014ca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	43da      	mvns	r2, r3
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68da      	ldr	r2, [r3, #12]
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	409a      	lsls	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800149e:	2201      	movs	r2, #1
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	43da      	mvns	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	2201      	movs	r2, #1
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
 80014bc:	0013      	movs	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2203      	movs	r2, #3
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d017      	beq.n	8001506 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	2203      	movs	r2, #3
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	43da      	mvns	r2, r3
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2203      	movs	r2, #3
 800150c:	4013      	ands	r3, r2
 800150e:	2b02      	cmp	r3, #2
 8001510:	d123      	bne.n	800155a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	08da      	lsrs	r2, r3, #3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3208      	adds	r2, #8
 800151a:	0092      	lsls	r2, r2, #2
 800151c:	58d3      	ldr	r3, [r2, r3]
 800151e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	2207      	movs	r2, #7
 8001524:	4013      	ands	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	220f      	movs	r2, #15
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	43da      	mvns	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	4013      	ands	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	691a      	ldr	r2, [r3, #16]
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2107      	movs	r1, #7
 800153e:	400b      	ands	r3, r1
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	409a      	lsls	r2, r3
 8001544:	0013      	movs	r3, r2
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	08da      	lsrs	r2, r3, #3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	3208      	adds	r2, #8
 8001554:	0092      	lsls	r2, r2, #2
 8001556:	6939      	ldr	r1, [r7, #16]
 8001558:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	2203      	movs	r2, #3
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2203      	movs	r2, #3
 8001578:	401a      	ands	r2, r3
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	23c0      	movs	r3, #192	; 0xc0
 8001594:	029b      	lsls	r3, r3, #10
 8001596:	4013      	ands	r3, r2
 8001598:	d100      	bne.n	800159c <HAL_GPIO_Init+0x17c>
 800159a:	e0a0      	b.n	80016de <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159c:	4b57      	ldr	r3, [pc, #348]	; (80016fc <HAL_GPIO_Init+0x2dc>)
 800159e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a0:	4b56      	ldr	r3, [pc, #344]	; (80016fc <HAL_GPIO_Init+0x2dc>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	430a      	orrs	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a8:	4a55      	ldr	r2, [pc, #340]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	589b      	ldr	r3, [r3, r2]
 80015b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	2203      	movs	r2, #3
 80015ba:	4013      	ands	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	220f      	movs	r2, #15
 80015c0:	409a      	lsls	r2, r3
 80015c2:	0013      	movs	r3, r2
 80015c4:	43da      	mvns	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4013      	ands	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	23a0      	movs	r3, #160	; 0xa0
 80015d0:	05db      	lsls	r3, r3, #23
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d01f      	beq.n	8001616 <HAL_GPIO_Init+0x1f6>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4a      	ldr	r2, [pc, #296]	; (8001704 <HAL_GPIO_Init+0x2e4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d019      	beq.n	8001612 <HAL_GPIO_Init+0x1f2>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a49      	ldr	r2, [pc, #292]	; (8001708 <HAL_GPIO_Init+0x2e8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x1ee>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_GPIO_Init+0x2ec>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x1ea>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a47      	ldr	r2, [pc, #284]	; (8001710 <HAL_GPIO_Init+0x2f0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x1e6>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a46      	ldr	r2, [pc, #280]	; (8001714 <HAL_GPIO_Init+0x2f4>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x1e2>
 80015fe:	2305      	movs	r3, #5
 8001600:	e00a      	b.n	8001618 <HAL_GPIO_Init+0x1f8>
 8001602:	2306      	movs	r3, #6
 8001604:	e008      	b.n	8001618 <HAL_GPIO_Init+0x1f8>
 8001606:	2304      	movs	r3, #4
 8001608:	e006      	b.n	8001618 <HAL_GPIO_Init+0x1f8>
 800160a:	2303      	movs	r3, #3
 800160c:	e004      	b.n	8001618 <HAL_GPIO_Init+0x1f8>
 800160e:	2302      	movs	r3, #2
 8001610:	e002      	b.n	8001618 <HAL_GPIO_Init+0x1f8>
 8001612:	2301      	movs	r3, #1
 8001614:	e000      	b.n	8001618 <HAL_GPIO_Init+0x1f8>
 8001616:	2300      	movs	r3, #0
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	2103      	movs	r1, #3
 800161c:	400a      	ands	r2, r1
 800161e:	0092      	lsls	r2, r2, #2
 8001620:	4093      	lsls	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4313      	orrs	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001628:	4935      	ldr	r1, [pc, #212]	; (8001700 <HAL_GPIO_Init+0x2e0>)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	089b      	lsrs	r3, r3, #2
 800162e:	3302      	adds	r3, #2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001636:	4b38      	ldr	r3, [pc, #224]	; (8001718 <HAL_GPIO_Init+0x2f8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	43da      	mvns	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	025b      	lsls	r3, r3, #9
 800164e:	4013      	ands	r3, r2
 8001650:	d003      	beq.n	800165a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4313      	orrs	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_GPIO_Init+0x2f8>)
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001660:	4b2d      	ldr	r3, [pc, #180]	; (8001718 <HAL_GPIO_Init+0x2f8>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	43da      	mvns	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	029b      	lsls	r3, r3, #10
 8001678:	4013      	ands	r3, r2
 800167a:	d003      	beq.n	8001684 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	4313      	orrs	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001684:	4b24      	ldr	r3, [pc, #144]	; (8001718 <HAL_GPIO_Init+0x2f8>)
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800168a:	4b23      	ldr	r3, [pc, #140]	; (8001718 <HAL_GPIO_Init+0x2f8>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43da      	mvns	r2, r3
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4013      	ands	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	035b      	lsls	r3, r3, #13
 80016a2:	4013      	ands	r3, r2
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <HAL_GPIO_Init+0x2f8>)
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_GPIO_Init+0x2f8>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43da      	mvns	r2, r3
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	039b      	lsls	r3, r3, #14
 80016cc:	4013      	ands	r3, r2
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80016d0:	693a      	ldr	r2, [r7, #16]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_GPIO_Init+0x2f8>)
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	3301      	adds	r3, #1
 80016e2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	40da      	lsrs	r2, r3
 80016ec:	1e13      	subs	r3, r2, #0
 80016ee:	d000      	beq.n	80016f2 <HAL_GPIO_Init+0x2d2>
 80016f0:	e6a2      	b.n	8001438 <HAL_GPIO_Init+0x18>
  }
}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	46c0      	nop			; (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b006      	add	sp, #24
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	40010000 	.word	0x40010000
 8001704:	50000400 	.word	0x50000400
 8001708:	50000800 	.word	0x50000800
 800170c:	50000c00 	.word	0x50000c00
 8001710:	50001000 	.word	0x50001000
 8001714:	50001c00 	.word	0x50001c00
 8001718:	40010400 	.word	0x40010400

0800171c <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	000a      	movs	r2, r1
 8001726:	1cbb      	adds	r3, r7, #2
 8001728:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	1cba      	adds	r2, r7, #2
 8001730:	8812      	ldrh	r2, [r2, #0]
 8001732:	4013      	ands	r3, r2
 8001734:	d004      	beq.n	8001740 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001736:	230f      	movs	r3, #15
 8001738:	18fb      	adds	r3, r7, r3
 800173a:	2201      	movs	r2, #1
 800173c:	701a      	strb	r2, [r3, #0]
 800173e:	e003      	b.n	8001748 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001740:	230f      	movs	r3, #15
 8001742:	18fb      	adds	r3, r7, r3
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001748:	230f      	movs	r3, #15
 800174a:	18fb      	adds	r3, r7, r3
 800174c:	781b      	ldrb	r3, [r3, #0]
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	0008      	movs	r0, r1
 8001760:	0011      	movs	r1, r2
 8001762:	1cbb      	adds	r3, r7, #2
 8001764:	1c02      	adds	r2, r0, #0
 8001766:	801a      	strh	r2, [r3, #0]
 8001768:	1c7b      	adds	r3, r7, #1
 800176a:	1c0a      	adds	r2, r1, #0
 800176c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800176e:	1c7b      	adds	r3, r7, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d004      	beq.n	8001780 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001776:	1cbb      	adds	r3, r7, #2
 8001778:	881a      	ldrh	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800177e:	e003      	b.n	8001788 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001780:	1cbb      	adds	r3, r7, #2
 8001782:	881a      	ldrh	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b002      	add	sp, #8
 800178e:	bd80      	pop	{r7, pc}

08001790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	0002      	movs	r2, r0
 8001798:	1dbb      	adds	r3, r7, #6
 800179a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	1dba      	adds	r2, r7, #6
 80017a2:	8812      	ldrh	r2, [r2, #0]
 80017a4:	4013      	ands	r3, r2
 80017a6:	d008      	beq.n	80017ba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80017aa:	1dba      	adds	r2, r7, #6
 80017ac:	8812      	ldrh	r2, [r2, #0]
 80017ae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017b0:	1dbb      	adds	r3, r7, #6
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff fa9b 	bl	8000cf0 <HAL_GPIO_EXTI_Callback>
  }
}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	46bd      	mov	sp, r7
 80017be:	b002      	add	sp, #8
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	f000 fbbf 	bl	8001f5a <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017dc:	4bc9      	ldr	r3, [pc, #804]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	220c      	movs	r2, #12
 80017e2:	4013      	ands	r3, r2
 80017e4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80017e6:	4bc7      	ldr	r3, [pc, #796]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 80017e8:	68da      	ldr	r2, [r3, #12]
 80017ea:	2380      	movs	r3, #128	; 0x80
 80017ec:	025b      	lsls	r3, r3, #9
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2201      	movs	r2, #1
 80017f8:	4013      	ands	r3, r2
 80017fa:	d100      	bne.n	80017fe <HAL_RCC_OscConfig+0x36>
 80017fc:	e07e      	b.n	80018fc <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	2b08      	cmp	r3, #8
 8001802:	d007      	beq.n	8001814 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b0c      	cmp	r3, #12
 8001808:	d112      	bne.n	8001830 <HAL_RCC_OscConfig+0x68>
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	025b      	lsls	r3, r3, #9
 8001810:	429a      	cmp	r2, r3
 8001812:	d10d      	bne.n	8001830 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	4bbb      	ldr	r3, [pc, #748]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	2380      	movs	r3, #128	; 0x80
 800181a:	029b      	lsls	r3, r3, #10
 800181c:	4013      	ands	r3, r2
 800181e:	d100      	bne.n	8001822 <HAL_RCC_OscConfig+0x5a>
 8001820:	e06b      	b.n	80018fa <HAL_RCC_OscConfig+0x132>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d167      	bne.n	80018fa <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	f000 fb95 	bl	8001f5a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	025b      	lsls	r3, r3, #9
 8001838:	429a      	cmp	r2, r3
 800183a:	d107      	bne.n	800184c <HAL_RCC_OscConfig+0x84>
 800183c:	4bb1      	ldr	r3, [pc, #708]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	4bb0      	ldr	r3, [pc, #704]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001842:	2180      	movs	r1, #128	; 0x80
 8001844:	0249      	lsls	r1, r1, #9
 8001846:	430a      	orrs	r2, r1
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	e027      	b.n	800189c <HAL_RCC_OscConfig+0xd4>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685a      	ldr	r2, [r3, #4]
 8001850:	23a0      	movs	r3, #160	; 0xa0
 8001852:	02db      	lsls	r3, r3, #11
 8001854:	429a      	cmp	r2, r3
 8001856:	d10e      	bne.n	8001876 <HAL_RCC_OscConfig+0xae>
 8001858:	4baa      	ldr	r3, [pc, #680]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4ba9      	ldr	r3, [pc, #676]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 800185e:	2180      	movs	r1, #128	; 0x80
 8001860:	02c9      	lsls	r1, r1, #11
 8001862:	430a      	orrs	r2, r1
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	4ba7      	ldr	r3, [pc, #668]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	4ba6      	ldr	r3, [pc, #664]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	0249      	lsls	r1, r1, #9
 8001870:	430a      	orrs	r2, r1
 8001872:	601a      	str	r2, [r3, #0]
 8001874:	e012      	b.n	800189c <HAL_RCC_OscConfig+0xd4>
 8001876:	4ba3      	ldr	r3, [pc, #652]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4ba2      	ldr	r3, [pc, #648]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 800187c:	49a2      	ldr	r1, [pc, #648]	; (8001b08 <HAL_RCC_OscConfig+0x340>)
 800187e:	400a      	ands	r2, r1
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	4ba0      	ldr	r3, [pc, #640]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	025b      	lsls	r3, r3, #9
 800188a:	4013      	ands	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	4b9c      	ldr	r3, [pc, #624]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b9b      	ldr	r3, [pc, #620]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001896:	499d      	ldr	r1, [pc, #628]	; (8001b0c <HAL_RCC_OscConfig+0x344>)
 8001898:	400a      	ands	r2, r1
 800189a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d015      	beq.n	80018d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fc4c 	bl	8001140 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018ac:	e009      	b.n	80018c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ae:	f7ff fc47 	bl	8001140 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b64      	cmp	r3, #100	; 0x64
 80018ba:	d902      	bls.n	80018c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	f000 fb4c 	bl	8001f5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018c2:	4b90      	ldr	r3, [pc, #576]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	029b      	lsls	r3, r3, #10
 80018ca:	4013      	ands	r3, r2
 80018cc:	d0ef      	beq.n	80018ae <HAL_RCC_OscConfig+0xe6>
 80018ce:	e015      	b.n	80018fc <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff fc36 	bl	8001140 <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018da:	f7ff fc31 	bl	8001140 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b64      	cmp	r3, #100	; 0x64
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e336      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ec:	4b85      	ldr	r3, [pc, #532]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	029b      	lsls	r3, r3, #10
 80018f4:	4013      	ands	r3, r2
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x112>
 80018f8:	e000      	b.n	80018fc <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fa:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2202      	movs	r2, #2
 8001902:	4013      	ands	r3, r2
 8001904:	d100      	bne.n	8001908 <HAL_RCC_OscConfig+0x140>
 8001906:	e099      	b.n	8001a3c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001910:	2220      	movs	r2, #32
 8001912:	4013      	ands	r3, r2
 8001914:	d009      	beq.n	800192a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001916:	4b7b      	ldr	r3, [pc, #492]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	4b7a      	ldr	r3, [pc, #488]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 800191c:	2120      	movs	r1, #32
 800191e:	430a      	orrs	r2, r1
 8001920:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	2220      	movs	r2, #32
 8001926:	4393      	bics	r3, r2
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2b04      	cmp	r3, #4
 800192e:	d005      	beq.n	800193c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d13e      	bne.n	80019b4 <HAL_RCC_OscConfig+0x1ec>
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d13b      	bne.n	80019b4 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800193c:	4b71      	ldr	r3, [pc, #452]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2204      	movs	r2, #4
 8001942:	4013      	ands	r3, r2
 8001944:	d004      	beq.n	8001950 <HAL_RCC_OscConfig+0x188>
 8001946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e304      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b6c      	ldr	r3, [pc, #432]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	4a6e      	ldr	r2, [pc, #440]	; (8001b10 <HAL_RCC_OscConfig+0x348>)
 8001956:	4013      	ands	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	021a      	lsls	r2, r3, #8
 8001960:	4b68      	ldr	r3, [pc, #416]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001962:	430a      	orrs	r2, r1
 8001964:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001966:	4b67      	ldr	r3, [pc, #412]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2209      	movs	r2, #9
 800196c:	4393      	bics	r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	4b64      	ldr	r3, [pc, #400]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001974:	430a      	orrs	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001978:	f000 fc42 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 800197c:	0001      	movs	r1, r0
 800197e:	4b61      	ldr	r3, [pc, #388]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	220f      	movs	r2, #15
 8001986:	4013      	ands	r3, r2
 8001988:	4a62      	ldr	r2, [pc, #392]	; (8001b14 <HAL_RCC_OscConfig+0x34c>)
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	000a      	movs	r2, r1
 800198e:	40da      	lsrs	r2, r3
 8001990:	4b61      	ldr	r3, [pc, #388]	; (8001b18 <HAL_RCC_OscConfig+0x350>)
 8001992:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001994:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <HAL_RCC_OscConfig+0x354>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2513      	movs	r5, #19
 800199a:	197c      	adds	r4, r7, r5
 800199c:	0018      	movs	r0, r3
 800199e:	f7ff fb89 	bl	80010b4 <HAL_InitTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80019a6:	197b      	adds	r3, r7, r5
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d046      	beq.n	8001a3c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80019ae:	197b      	adds	r3, r7, r5
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	e2d2      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d027      	beq.n	8001a0a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80019ba:	4b52      	ldr	r3, [pc, #328]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2209      	movs	r2, #9
 80019c0:	4393      	bics	r3, r2
 80019c2:	0019      	movs	r1, r3
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 80019c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019cc:	f7ff fbb8 	bl	8001140 <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff fbb3 	bl	8001140 <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e2b8      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019e8:	4b46      	ldr	r3, [pc, #280]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2204      	movs	r2, #4
 80019ee:	4013      	ands	r3, r2
 80019f0:	d0f1      	beq.n	80019d6 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f2:	4b44      	ldr	r3, [pc, #272]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a46      	ldr	r2, [pc, #280]	; (8001b10 <HAL_RCC_OscConfig+0x348>)
 80019f8:	4013      	ands	r3, r2
 80019fa:	0019      	movs	r1, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	021a      	lsls	r2, r3, #8
 8001a02:	4b40      	ldr	r3, [pc, #256]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	e018      	b.n	8001a3c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4b3e      	ldr	r3, [pc, #248]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001a10:	2101      	movs	r1, #1
 8001a12:	438a      	bics	r2, r1
 8001a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a16:	f7ff fb93 	bl	8001140 <HAL_GetTick>
 8001a1a:	0003      	movs	r3, r0
 8001a1c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a20:	f7ff fb8e 	bl	8001140 <HAL_GetTick>
 8001a24:	0002      	movs	r2, r0
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e293      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2204      	movs	r2, #4
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d1f1      	bne.n	8001a20 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2210      	movs	r2, #16
 8001a42:	4013      	ands	r3, r2
 8001a44:	d100      	bne.n	8001a48 <HAL_RCC_OscConfig+0x280>
 8001a46:	e0a2      	b.n	8001b8e <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d140      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	4013      	ands	r3, r2
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x29e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e279      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a66:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	4a2d      	ldr	r2, [pc, #180]	; (8001b20 <HAL_RCC_OscConfig+0x358>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a74:	4b23      	ldr	r3, [pc, #140]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a7a:	4b22      	ldr	r3, [pc, #136]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	021b      	lsls	r3, r3, #8
 8001a80:	0a19      	lsrs	r1, r3, #8
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	061a      	lsls	r2, r3, #24
 8001a88:	4b1e      	ldr	r3, [pc, #120]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	0b5b      	lsrs	r3, r3, #13
 8001a94:	3301      	adds	r3, #1
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	0212      	lsls	r2, r2, #8
 8001a9a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	091b      	lsrs	r3, r3, #4
 8001aa2:	210f      	movs	r1, #15
 8001aa4:	400b      	ands	r3, r1
 8001aa6:	491b      	ldr	r1, [pc, #108]	; (8001b14 <HAL_RCC_OscConfig+0x34c>)
 8001aa8:	5ccb      	ldrb	r3, [r1, r3]
 8001aaa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001aac:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <HAL_RCC_OscConfig+0x350>)
 8001aae:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ab0:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <HAL_RCC_OscConfig+0x354>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2513      	movs	r5, #19
 8001ab6:	197c      	adds	r4, r7, r5
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7ff fafb 	bl	80010b4 <HAL_InitTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001ac2:	197b      	adds	r3, r7, r5
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d061      	beq.n	8001b8e <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001aca:	197b      	adds	r3, r7, r5
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	e244      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69db      	ldr	r3, [r3, #28]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d040      	beq.n	8001b5a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_OscConfig+0x33c>)
 8001ade:	2180      	movs	r1, #128	; 0x80
 8001ae0:	0049      	lsls	r1, r1, #1
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fb2b 	bl	8001140 <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001aee:	e019      	b.n	8001b24 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001af0:	f7ff fb26 	bl	8001140 <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d912      	bls.n	8001b24 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e22b      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	40021000 	.word	0x40021000
 8001b08:	fffeffff 	.word	0xfffeffff
 8001b0c:	fffbffff 	.word	0xfffbffff
 8001b10:	ffffe0ff 	.word	0xffffe0ff
 8001b14:	08004110 	.word	0x08004110
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	20000004 	.word	0x20000004
 8001b20:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b24:	4bca      	ldr	r3, [pc, #808]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d0df      	beq.n	8001af0 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b30:	4bc7      	ldr	r3, [pc, #796]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	4ac7      	ldr	r2, [pc, #796]	; (8001e54 <HAL_RCC_OscConfig+0x68c>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b3e:	4bc4      	ldr	r3, [pc, #784]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b44:	4bc2      	ldr	r3, [pc, #776]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	0a19      	lsrs	r1, r3, #8
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	061a      	lsls	r2, r3, #24
 8001b52:	4bbf      	ldr	r3, [pc, #764]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001b54:	430a      	orrs	r2, r1
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	e019      	b.n	8001b8e <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b5a:	4bbd      	ldr	r3, [pc, #756]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	4bbc      	ldr	r3, [pc, #752]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001b60:	49bd      	ldr	r1, [pc, #756]	; (8001e58 <HAL_RCC_OscConfig+0x690>)
 8001b62:	400a      	ands	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b66:	f7ff faeb 	bl	8001140 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b70:	f7ff fae6 	bl	8001140 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e1eb      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001b82:	4bb3      	ldr	r3, [pc, #716]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2208      	movs	r2, #8
 8001b94:	4013      	ands	r3, r2
 8001b96:	d036      	beq.n	8001c06 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d019      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba0:	4bab      	ldr	r3, [pc, #684]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001ba2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ba4:	4baa      	ldr	r3, [pc, #680]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7ff fac8 	bl	8001140 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fac3 	bl	8001140 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e1c8      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bc8:	4ba1      	ldr	r3, [pc, #644]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001bca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d0f1      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3ee>
 8001bd2:	e018      	b.n	8001c06 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd4:	4b9e      	ldr	r3, [pc, #632]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bd8:	4b9d      	ldr	r3, [pc, #628]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	438a      	bics	r2, r1
 8001bde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be0:	f7ff faae 	bl	8001140 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bea:	f7ff faa9 	bl	8001140 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e1ae      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bfc:	4b94      	ldr	r3, [pc, #592]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c00:	2202      	movs	r2, #2
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1f1      	bne.n	8001bea <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2204      	movs	r2, #4
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d100      	bne.n	8001c12 <HAL_RCC_OscConfig+0x44a>
 8001c10:	e0ae      	b.n	8001d70 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2023      	movs	r0, #35	; 0x23
 8001c14:	183b      	adds	r3, r7, r0
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b8d      	ldr	r3, [pc, #564]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	055b      	lsls	r3, r3, #21
 8001c22:	4013      	ands	r3, r2
 8001c24:	d109      	bne.n	8001c3a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b8a      	ldr	r3, [pc, #552]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c2a:	4b89      	ldr	r3, [pc, #548]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001c2c:	2180      	movs	r1, #128	; 0x80
 8001c2e:	0549      	lsls	r1, r1, #21
 8001c30:	430a      	orrs	r2, r1
 8001c32:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001c34:	183b      	adds	r3, r7, r0
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3a:	4b88      	ldr	r3, [pc, #544]	; (8001e5c <HAL_RCC_OscConfig+0x694>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	4013      	ands	r3, r2
 8001c44:	d11a      	bne.n	8001c7c <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c46:	4b85      	ldr	r3, [pc, #532]	; (8001e5c <HAL_RCC_OscConfig+0x694>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4b84      	ldr	r3, [pc, #528]	; (8001e5c <HAL_RCC_OscConfig+0x694>)
 8001c4c:	2180      	movs	r1, #128	; 0x80
 8001c4e:	0049      	lsls	r1, r1, #1
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c54:	f7ff fa74 	bl	8001140 <HAL_GetTick>
 8001c58:	0003      	movs	r3, r0
 8001c5a:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7ff fa6f 	bl	8001140 <HAL_GetTick>
 8001c62:	0002      	movs	r2, r0
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b64      	cmp	r3, #100	; 0x64
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e174      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b7a      	ldr	r3, [pc, #488]	; (8001e5c <HAL_RCC_OscConfig+0x694>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d107      	bne.n	8001c98 <HAL_RCC_OscConfig+0x4d0>
 8001c88:	4b71      	ldr	r3, [pc, #452]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001c8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c8c:	4b70      	ldr	r3, [pc, #448]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001c8e:	2180      	movs	r1, #128	; 0x80
 8001c90:	0049      	lsls	r1, r1, #1
 8001c92:	430a      	orrs	r2, r1
 8001c94:	651a      	str	r2, [r3, #80]	; 0x50
 8001c96:	e031      	b.n	8001cfc <HAL_RCC_OscConfig+0x534>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10c      	bne.n	8001cba <HAL_RCC_OscConfig+0x4f2>
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001ca2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ca4:	4b6a      	ldr	r3, [pc, #424]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001ca6:	496c      	ldr	r1, [pc, #432]	; (8001e58 <HAL_RCC_OscConfig+0x690>)
 8001ca8:	400a      	ands	r2, r1
 8001caa:	651a      	str	r2, [r3, #80]	; 0x50
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001cae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cb0:	4b67      	ldr	r3, [pc, #412]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001cb2:	496b      	ldr	r1, [pc, #428]	; (8001e60 <HAL_RCC_OscConfig+0x698>)
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	651a      	str	r2, [r3, #80]	; 0x50
 8001cb8:	e020      	b.n	8001cfc <HAL_RCC_OscConfig+0x534>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	23a0      	movs	r3, #160	; 0xa0
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x51c>
 8001cc6:	4b62      	ldr	r3, [pc, #392]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cca:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001ccc:	2180      	movs	r1, #128	; 0x80
 8001cce:	00c9      	lsls	r1, r1, #3
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	651a      	str	r2, [r3, #80]	; 0x50
 8001cd4:	4b5e      	ldr	r3, [pc, #376]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001cd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cd8:	4b5d      	ldr	r3, [pc, #372]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	0049      	lsls	r1, r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	651a      	str	r2, [r3, #80]	; 0x50
 8001ce2:	e00b      	b.n	8001cfc <HAL_RCC_OscConfig+0x534>
 8001ce4:	4b5a      	ldr	r3, [pc, #360]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001ce6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ce8:	4b59      	ldr	r3, [pc, #356]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001cea:	495b      	ldr	r1, [pc, #364]	; (8001e58 <HAL_RCC_OscConfig+0x690>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	651a      	str	r2, [r3, #80]	; 0x50
 8001cf0:	4b57      	ldr	r3, [pc, #348]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001cf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf4:	4b56      	ldr	r3, [pc, #344]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001cf6:	495a      	ldr	r1, [pc, #360]	; (8001e60 <HAL_RCC_OscConfig+0x698>)
 8001cf8:	400a      	ands	r2, r1
 8001cfa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d015      	beq.n	8001d30 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d04:	f7ff fa1c 	bl	8001140 <HAL_GetTick>
 8001d08:	0003      	movs	r3, r0
 8001d0a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d0c:	e009      	b.n	8001d22 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d0e:	f7ff fa17 	bl	8001140 <HAL_GetTick>
 8001d12:	0002      	movs	r2, r0
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <HAL_RCC_OscConfig+0x69c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e11b      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d22:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001d24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d26:	2380      	movs	r3, #128	; 0x80
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d0ef      	beq.n	8001d0e <HAL_RCC_OscConfig+0x546>
 8001d2e:	e014      	b.n	8001d5a <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d30:	f7ff fa06 	bl	8001140 <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d38:	e009      	b.n	8001d4e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d3a:	f7ff fa01 	bl	8001140 <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	4a47      	ldr	r2, [pc, #284]	; (8001e64 <HAL_RCC_OscConfig+0x69c>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e105      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d4e:	4b40      	ldr	r3, [pc, #256]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001d50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d52:	2380      	movs	r3, #128	; 0x80
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	d1ef      	bne.n	8001d3a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d5a:	2323      	movs	r3, #35	; 0x23
 8001d5c:	18fb      	adds	r3, r7, r3
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d105      	bne.n	8001d70 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d64:	4b3a      	ldr	r3, [pc, #232]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001d66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d68:	4b39      	ldr	r3, [pc, #228]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001d6a:	493f      	ldr	r1, [pc, #252]	; (8001e68 <HAL_RCC_OscConfig+0x6a0>)
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2220      	movs	r2, #32
 8001d76:	4013      	ands	r3, r2
 8001d78:	d049      	beq.n	8001e0e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d026      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001d82:	4b33      	ldr	r3, [pc, #204]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001d88:	2101      	movs	r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d92:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	635a      	str	r2, [r3, #52]	; 0x34
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCC_OscConfig+0x6a4>)
 8001d9c:	6a1a      	ldr	r2, [r3, #32]
 8001d9e:	4b33      	ldr	r3, [pc, #204]	; (8001e6c <HAL_RCC_OscConfig+0x6a4>)
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	0189      	lsls	r1, r1, #6
 8001da4:	430a      	orrs	r2, r1
 8001da6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff f9ca 	bl	8001140 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001db2:	f7ff f9c5 	bl	8001140 <HAL_GetTick>
 8001db6:	0002      	movs	r2, r0
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e0ca      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d0f1      	beq.n	8001db2 <HAL_RCC_OscConfig+0x5ea>
 8001dce:	e01e      	b.n	8001e0e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	438a      	bics	r2, r1
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	4b23      	ldr	r3, [pc, #140]	; (8001e6c <HAL_RCC_OscConfig+0x6a4>)
 8001dde:	6a1a      	ldr	r2, [r3, #32]
 8001de0:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCC_OscConfig+0x6a4>)
 8001de2:	4923      	ldr	r1, [pc, #140]	; (8001e70 <HAL_RCC_OscConfig+0x6a8>)
 8001de4:	400a      	ands	r2, r1
 8001de6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de8:	f7ff f9aa 	bl	8001140 <HAL_GetTick>
 8001dec:	0003      	movs	r3, r0
 8001dee:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df2:	f7ff f9a5 	bl	8001140 <HAL_GetTick>
 8001df6:	0002      	movs	r2, r0
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e0aa      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d1f1      	bne.n	8001df2 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d100      	bne.n	8001e18 <HAL_RCC_OscConfig+0x650>
 8001e16:	e09f      	b.n	8001f58 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	2b0c      	cmp	r3, #12
 8001e1c:	d100      	bne.n	8001e20 <HAL_RCC_OscConfig+0x658>
 8001e1e:	e078      	b.n	8001f12 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d159      	bne.n	8001edc <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e28:	4b09      	ldr	r3, [pc, #36]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <HAL_RCC_OscConfig+0x688>)
 8001e2e:	4911      	ldr	r1, [pc, #68]	; (8001e74 <HAL_RCC_OscConfig+0x6ac>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff f984 	bl	8001140 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e3c:	e01c      	b.n	8001e78 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff f97f 	bl	8001140 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d915      	bls.n	8001e78 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e084      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
 8001e50:	40021000 	.word	0x40021000
 8001e54:	ffff1fff 	.word	0xffff1fff
 8001e58:	fffffeff 	.word	0xfffffeff
 8001e5c:	40007000 	.word	0x40007000
 8001e60:	fffffbff 	.word	0xfffffbff
 8001e64:	00001388 	.word	0x00001388
 8001e68:	efffffff 	.word	0xefffffff
 8001e6c:	40010000 	.word	0x40010000
 8001e70:	ffffdfff 	.word	0xffffdfff
 8001e74:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001e78:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <HAL_RCC_OscConfig+0x79c>)
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	2380      	movs	r3, #128	; 0x80
 8001e7e:	049b      	lsls	r3, r3, #18
 8001e80:	4013      	ands	r3, r2
 8001e82:	d1dc      	bne.n	8001e3e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e84:	4b37      	ldr	r3, [pc, #220]	; (8001f64 <HAL_RCC_OscConfig+0x79c>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	4a37      	ldr	r2, [pc, #220]	; (8001f68 <HAL_RCC_OscConfig+0x7a0>)
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	0019      	movs	r1, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	431a      	orrs	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <HAL_RCC_OscConfig+0x79c>)
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_RCC_OscConfig+0x79c>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	; (8001f64 <HAL_RCC_OscConfig+0x79c>)
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	0449      	lsls	r1, r1, #17
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7ff f945 	bl	8001140 <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ebc:	f7ff f940 	bl	8001140 <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e045      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ece:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <HAL_RCC_OscConfig+0x79c>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	049b      	lsls	r3, r3, #18
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x6f4>
 8001eda:	e03d      	b.n	8001f58 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <HAL_RCC_OscConfig+0x79c>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_RCC_OscConfig+0x79c>)
 8001ee2:	4922      	ldr	r1, [pc, #136]	; (8001f6c <HAL_RCC_OscConfig+0x7a4>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f92a 	bl	8001140 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff f925 	bl	8001140 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e02a      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f04:	4b17      	ldr	r3, [pc, #92]	; (8001f64 <HAL_RCC_OscConfig+0x79c>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	; 0x80
 8001f0a:	049b      	lsls	r3, r3, #18
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x72a>
 8001f10:	e022      	b.n	8001f58 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e01d      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <HAL_RCC_OscConfig+0x79c>)
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	025b      	lsls	r3, r3, #9
 8001f2a:	401a      	ands	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d10f      	bne.n	8001f54 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	23f0      	movs	r3, #240	; 0xf0
 8001f38:	039b      	lsls	r3, r3, #14
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	23c0      	movs	r3, #192	; 0xc0
 8001f48:	041b      	lsls	r3, r3, #16
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e000      	b.n	8001f5a <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	b00a      	add	sp, #40	; 0x28
 8001f60:	bdb0      	pop	{r4, r5, r7, pc}
 8001f62:	46c0      	nop			; (mov r8, r8)
 8001f64:	40021000 	.word	0x40021000
 8001f68:	ff02ffff 	.word	0xff02ffff
 8001f6c:	feffffff 	.word	0xfeffffff

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b5b0      	push	{r4, r5, r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e128      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b96      	ldr	r3, [pc, #600]	; (80021e0 <HAL_RCC_ClockConfig+0x270>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d91e      	bls.n	8001fd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b93      	ldr	r3, [pc, #588]	; (80021e0 <HAL_RCC_ClockConfig+0x270>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2201      	movs	r2, #1
 8001f98:	4393      	bics	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	4b90      	ldr	r3, [pc, #576]	; (80021e0 <HAL_RCC_ClockConfig+0x270>)
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001fa4:	f7ff f8cc 	bl	8001140 <HAL_GetTick>
 8001fa8:	0003      	movs	r3, r0
 8001faa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fac:	e009      	b.n	8001fc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fae:	f7ff f8c7 	bl	8001140 <HAL_GetTick>
 8001fb2:	0002      	movs	r2, r0
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	4a8a      	ldr	r2, [pc, #552]	; (80021e4 <HAL_RCC_ClockConfig+0x274>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e109      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b87      	ldr	r3, [pc, #540]	; (80021e0 <HAL_RCC_ClockConfig+0x270>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	4013      	ands	r3, r2
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1ee      	bne.n	8001fae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fda:	4b83      	ldr	r3, [pc, #524]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	22f0      	movs	r2, #240	; 0xf0
 8001fe0:	4393      	bics	r3, r2
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	4b7f      	ldr	r3, [pc, #508]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8001fea:	430a      	orrs	r2, r1
 8001fec:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	d100      	bne.n	8001ffa <HAL_RCC_ClockConfig+0x8a>
 8001ff8:	e089      	b.n	800210e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d107      	bne.n	8002012 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002002:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	2380      	movs	r3, #128	; 0x80
 8002008:	029b      	lsls	r3, r3, #10
 800200a:	4013      	ands	r3, r2
 800200c:	d120      	bne.n	8002050 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0e1      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800201a:	4b73      	ldr	r3, [pc, #460]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	2380      	movs	r3, #128	; 0x80
 8002020:	049b      	lsls	r3, r3, #18
 8002022:	4013      	ands	r3, r2
 8002024:	d114      	bne.n	8002050 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0d5      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d106      	bne.n	8002040 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002032:	4b6d      	ldr	r3, [pc, #436]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2204      	movs	r2, #4
 8002038:	4013      	ands	r3, r2
 800203a:	d109      	bne.n	8002050 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0ca      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002040:	4b69      	ldr	r3, [pc, #420]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	; 0x80
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4013      	ands	r3, r2
 800204a:	d101      	bne.n	8002050 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0c2      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002050:	4b65      	ldr	r3, [pc, #404]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	2203      	movs	r2, #3
 8002056:	4393      	bics	r3, r2
 8002058:	0019      	movs	r1, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	4b62      	ldr	r3, [pc, #392]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002060:	430a      	orrs	r2, r1
 8002062:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002064:	f7ff f86c 	bl	8001140 <HAL_GetTick>
 8002068:	0003      	movs	r3, r0
 800206a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b02      	cmp	r3, #2
 8002072:	d111      	bne.n	8002098 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002074:	e009      	b.n	800208a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002076:	f7ff f863 	bl	8001140 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	4a58      	ldr	r2, [pc, #352]	; (80021e4 <HAL_RCC_ClockConfig+0x274>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0a5      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800208a:	4b57      	ldr	r3, [pc, #348]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	220c      	movs	r2, #12
 8002090:	4013      	ands	r3, r2
 8002092:	2b08      	cmp	r3, #8
 8002094:	d1ef      	bne.n	8002076 <HAL_RCC_ClockConfig+0x106>
 8002096:	e03a      	b.n	800210e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d111      	bne.n	80020c4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a0:	e009      	b.n	80020b6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a2:	f7ff f84d 	bl	8001140 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	4a4d      	ldr	r2, [pc, #308]	; (80021e4 <HAL_RCC_ClockConfig+0x274>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e08f      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020b6:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	220c      	movs	r2, #12
 80020bc:	4013      	ands	r3, r2
 80020be:	2b0c      	cmp	r3, #12
 80020c0:	d1ef      	bne.n	80020a2 <HAL_RCC_ClockConfig+0x132>
 80020c2:	e024      	b.n	800210e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d11b      	bne.n	8002104 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020cc:	e009      	b.n	80020e2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ce:	f7ff f837 	bl	8001140 <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	4a42      	ldr	r2, [pc, #264]	; (80021e4 <HAL_RCC_ClockConfig+0x274>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e079      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	220c      	movs	r2, #12
 80020e8:	4013      	ands	r3, r2
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	d1ef      	bne.n	80020ce <HAL_RCC_ClockConfig+0x15e>
 80020ee:	e00e      	b.n	800210e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f7ff f826 	bl	8001140 <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	4a3a      	ldr	r2, [pc, #232]	; (80021e4 <HAL_RCC_ClockConfig+0x274>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e068      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002104:	4b38      	ldr	r3, [pc, #224]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	220c      	movs	r2, #12
 800210a:	4013      	ands	r3, r2
 800210c:	d1f0      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210e:	4b34      	ldr	r3, [pc, #208]	; (80021e0 <HAL_RCC_ClockConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	4013      	ands	r3, r2
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d21e      	bcs.n	800215a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211c:	4b30      	ldr	r3, [pc, #192]	; (80021e0 <HAL_RCC_ClockConfig+0x270>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2201      	movs	r2, #1
 8002122:	4393      	bics	r3, r2
 8002124:	0019      	movs	r1, r3
 8002126:	4b2e      	ldr	r3, [pc, #184]	; (80021e0 <HAL_RCC_ClockConfig+0x270>)
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800212e:	f7ff f807 	bl	8001140 <HAL_GetTick>
 8002132:	0003      	movs	r3, r0
 8002134:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002136:	e009      	b.n	800214c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002138:	f7ff f802 	bl	8001140 <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	4a28      	ldr	r2, [pc, #160]	; (80021e4 <HAL_RCC_ClockConfig+0x274>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e044      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCC_ClockConfig+0x270>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2201      	movs	r2, #1
 8002152:	4013      	ands	r3, r2
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d1ee      	bne.n	8002138 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2204      	movs	r2, #4
 8002160:	4013      	ands	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b20      	ldr	r3, [pc, #128]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4a20      	ldr	r2, [pc, #128]	; (80021ec <HAL_RCC_ClockConfig+0x27c>)
 800216a:	4013      	ands	r3, r2
 800216c:	0019      	movs	r1, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002174:	430a      	orrs	r2, r1
 8002176:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2208      	movs	r2, #8
 800217e:	4013      	ands	r3, r2
 8002180:	d00a      	beq.n	8002198 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4a1a      	ldr	r2, [pc, #104]	; (80021f0 <HAL_RCC_ClockConfig+0x280>)
 8002188:	4013      	ands	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	00da      	lsls	r2, r3, #3
 8002192:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002198:	f000 f832 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 800219c:	0001      	movs	r1, r0
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_ClockConfig+0x278>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	091b      	lsrs	r3, r3, #4
 80021a4:	220f      	movs	r2, #15
 80021a6:	4013      	ands	r3, r2
 80021a8:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_RCC_ClockConfig+0x284>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	000a      	movs	r2, r1
 80021ae:	40da      	lsrs	r2, r3
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <HAL_RCC_ClockConfig+0x288>)
 80021b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_RCC_ClockConfig+0x28c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	250b      	movs	r5, #11
 80021ba:	197c      	adds	r4, r7, r5
 80021bc:	0018      	movs	r0, r3
 80021be:	f7fe ff79 	bl	80010b4 <HAL_InitTick>
 80021c2:	0003      	movs	r3, r0
 80021c4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80021c6:	197b      	adds	r3, r7, r5
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d002      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80021ce:	197b      	adds	r3, r7, r5
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	b004      	add	sp, #16
 80021dc:	bdb0      	pop	{r4, r5, r7, pc}
 80021de:	46c0      	nop			; (mov r8, r8)
 80021e0:	40022000 	.word	0x40022000
 80021e4:	00001388 	.word	0x00001388
 80021e8:	40021000 	.word	0x40021000
 80021ec:	fffff8ff 	.word	0xfffff8ff
 80021f0:	ffffc7ff 	.word	0xffffc7ff
 80021f4:	08004110 	.word	0x08004110
 80021f8:	20000000 	.word	0x20000000
 80021fc:	20000004 	.word	0x20000004

08002200 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002200:	b5b0      	push	{r4, r5, r7, lr}
 8002202:	b08e      	sub	sp, #56	; 0x38
 8002204:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002206:	4b4c      	ldr	r3, [pc, #304]	; (8002338 <HAL_RCC_GetSysClockFreq+0x138>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800220c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800220e:	230c      	movs	r3, #12
 8002210:	4013      	ands	r3, r2
 8002212:	2b0c      	cmp	r3, #12
 8002214:	d014      	beq.n	8002240 <HAL_RCC_GetSysClockFreq+0x40>
 8002216:	d900      	bls.n	800221a <HAL_RCC_GetSysClockFreq+0x1a>
 8002218:	e07b      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x112>
 800221a:	2b04      	cmp	r3, #4
 800221c:	d002      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0x24>
 800221e:	2b08      	cmp	r3, #8
 8002220:	d00b      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x3a>
 8002222:	e076      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002224:	4b44      	ldr	r3, [pc, #272]	; (8002338 <HAL_RCC_GetSysClockFreq+0x138>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2210      	movs	r2, #16
 800222a:	4013      	ands	r3, r2
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800222e:	4b43      	ldr	r3, [pc, #268]	; (800233c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002232:	e07c      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002234:	4b42      	ldr	r3, [pc, #264]	; (8002340 <HAL_RCC_GetSysClockFreq+0x140>)
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002238:	e079      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800223a:	4b42      	ldr	r3, [pc, #264]	; (8002344 <HAL_RCC_GetSysClockFreq+0x144>)
 800223c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800223e:	e076      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002242:	0c9a      	lsrs	r2, r3, #18
 8002244:	230f      	movs	r3, #15
 8002246:	401a      	ands	r2, r3
 8002248:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <HAL_RCC_GetSysClockFreq+0x148>)
 800224a:	5c9b      	ldrb	r3, [r3, r2]
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	0d9a      	lsrs	r2, r3, #22
 8002252:	2303      	movs	r3, #3
 8002254:	4013      	ands	r3, r2
 8002256:	3301      	adds	r3, #1
 8002258:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800225a:	4b37      	ldr	r3, [pc, #220]	; (8002338 <HAL_RCC_GetSysClockFreq+0x138>)
 800225c:	68da      	ldr	r2, [r3, #12]
 800225e:	2380      	movs	r3, #128	; 0x80
 8002260:	025b      	lsls	r3, r3, #9
 8002262:	4013      	ands	r3, r2
 8002264:	d01a      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	4a35      	ldr	r2, [pc, #212]	; (8002344 <HAL_RCC_GetSysClockFreq+0x144>)
 8002270:	2300      	movs	r3, #0
 8002272:	69b8      	ldr	r0, [r7, #24]
 8002274:	69f9      	ldr	r1, [r7, #28]
 8002276:	f7fd fff3 	bl	8000260 <__aeabi_lmul>
 800227a:	0002      	movs	r2, r0
 800227c:	000b      	movs	r3, r1
 800227e:	0010      	movs	r0, r2
 8002280:	0019      	movs	r1, r3
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f7fd ffc7 	bl	8000220 <__aeabi_uldivmod>
 8002292:	0002      	movs	r2, r0
 8002294:	000b      	movs	r3, r1
 8002296:	0013      	movs	r3, r2
 8002298:	637b      	str	r3, [r7, #52]	; 0x34
 800229a:	e037      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800229c:	4b26      	ldr	r3, [pc, #152]	; (8002338 <HAL_RCC_GetSysClockFreq+0x138>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2210      	movs	r2, #16
 80022a2:	4013      	ands	r3, r2
 80022a4:	d01a      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80022a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	4a23      	ldr	r2, [pc, #140]	; (800233c <HAL_RCC_GetSysClockFreq+0x13c>)
 80022b0:	2300      	movs	r3, #0
 80022b2:	68b8      	ldr	r0, [r7, #8]
 80022b4:	68f9      	ldr	r1, [r7, #12]
 80022b6:	f7fd ffd3 	bl	8000260 <__aeabi_lmul>
 80022ba:	0002      	movs	r2, r0
 80022bc:	000b      	movs	r3, r1
 80022be:	0010      	movs	r0, r2
 80022c0:	0019      	movs	r1, r3
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	603b      	str	r3, [r7, #0]
 80022c6:	2300      	movs	r3, #0
 80022c8:	607b      	str	r3, [r7, #4]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f7fd ffa7 	bl	8000220 <__aeabi_uldivmod>
 80022d2:	0002      	movs	r2, r0
 80022d4:	000b      	movs	r3, r1
 80022d6:	0013      	movs	r3, r2
 80022d8:	637b      	str	r3, [r7, #52]	; 0x34
 80022da:	e017      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022de:	0018      	movs	r0, r3
 80022e0:	2300      	movs	r3, #0
 80022e2:	0019      	movs	r1, r3
 80022e4:	4a16      	ldr	r2, [pc, #88]	; (8002340 <HAL_RCC_GetSysClockFreq+0x140>)
 80022e6:	2300      	movs	r3, #0
 80022e8:	f7fd ffba 	bl	8000260 <__aeabi_lmul>
 80022ec:	0002      	movs	r2, r0
 80022ee:	000b      	movs	r3, r1
 80022f0:	0010      	movs	r0, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	001c      	movs	r4, r3
 80022f8:	2300      	movs	r3, #0
 80022fa:	001d      	movs	r5, r3
 80022fc:	0022      	movs	r2, r4
 80022fe:	002b      	movs	r3, r5
 8002300:	f7fd ff8e 	bl	8000220 <__aeabi_uldivmod>
 8002304:	0002      	movs	r2, r0
 8002306:	000b      	movs	r3, r1
 8002308:	0013      	movs	r3, r2
 800230a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800230c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002310:	e00d      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002312:	4b09      	ldr	r3, [pc, #36]	; (8002338 <HAL_RCC_GetSysClockFreq+0x138>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	0b5b      	lsrs	r3, r3, #13
 8002318:	2207      	movs	r2, #7
 800231a:	4013      	ands	r3, r2
 800231c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	3301      	adds	r3, #1
 8002322:	2280      	movs	r2, #128	; 0x80
 8002324:	0212      	lsls	r2, r2, #8
 8002326:	409a      	lsls	r2, r3
 8002328:	0013      	movs	r3, r2
 800232a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800232c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800232e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002330:	0018      	movs	r0, r3
 8002332:	46bd      	mov	sp, r7
 8002334:	b00e      	add	sp, #56	; 0x38
 8002336:	bdb0      	pop	{r4, r5, r7, pc}
 8002338:	40021000 	.word	0x40021000
 800233c:	003d0900 	.word	0x003d0900
 8002340:	00f42400 	.word	0x00f42400
 8002344:	007a1200 	.word	0x007a1200
 8002348:	08004128 	.word	0x08004128

0800234c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002350:	4b02      	ldr	r3, [pc, #8]	; (800235c <HAL_RCC_GetHCLKFreq+0x10>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	20000000 	.word	0x20000000

08002360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002364:	f7ff fff2 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002368:	0001      	movs	r1, r0
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_GetPCLK1Freq+0x24>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	0a1b      	lsrs	r3, r3, #8
 8002370:	2207      	movs	r2, #7
 8002372:	4013      	ands	r3, r2
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	40d9      	lsrs	r1, r3
 800237a:	000b      	movs	r3, r1
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	40021000 	.word	0x40021000
 8002388:	08004120 	.word	0x08004120

0800238c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002390:	f7ff ffdc 	bl	800234c <HAL_RCC_GetHCLKFreq>
 8002394:	0001      	movs	r1, r0
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	0adb      	lsrs	r3, r3, #11
 800239c:	2207      	movs	r2, #7
 800239e:	4013      	ands	r3, r2
 80023a0:	4a04      	ldr	r2, [pc, #16]	; (80023b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023a2:	5cd3      	ldrb	r3, [r2, r3]
 80023a4:	40d9      	lsrs	r1, r3
 80023a6:	000b      	movs	r3, r1
}
 80023a8:	0018      	movs	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	40021000 	.word	0x40021000
 80023b4:	08004120 	.word	0x08004120

080023b8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b086      	sub	sp, #24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80023c0:	2017      	movs	r0, #23
 80023c2:	183b      	adds	r3, r7, r0
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2220      	movs	r2, #32
 80023ce:	4013      	ands	r3, r2
 80023d0:	d100      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 80023d2:	e0c2      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023d4:	4b98      	ldr	r3, [pc, #608]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023d8:	2380      	movs	r3, #128	; 0x80
 80023da:	055b      	lsls	r3, r3, #21
 80023dc:	4013      	ands	r3, r2
 80023de:	d109      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e0:	4b95      	ldr	r3, [pc, #596]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023e4:	4b94      	ldr	r3, [pc, #592]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	0549      	lsls	r1, r1, #21
 80023ea:	430a      	orrs	r2, r1
 80023ec:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80023ee:	183b      	adds	r3, r7, r0
 80023f0:	2201      	movs	r2, #1
 80023f2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b91      	ldr	r3, [pc, #580]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	2380      	movs	r3, #128	; 0x80
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4013      	ands	r3, r2
 80023fe:	d11a      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002400:	4b8e      	ldr	r3, [pc, #568]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b8d      	ldr	r3, [pc, #564]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002406:	2180      	movs	r1, #128	; 0x80
 8002408:	0049      	lsls	r1, r1, #1
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800240e:	f7fe fe97 	bl	8001140 <HAL_GetTick>
 8002412:	0003      	movs	r3, r0
 8002414:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002416:	e008      	b.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002418:	f7fe fe92 	bl	8001140 <HAL_GetTick>
 800241c:	0002      	movs	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e102      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x278>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800242a:	4b84      	ldr	r3, [pc, #528]	; (800263c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	2380      	movs	r3, #128	; 0x80
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	4013      	ands	r3, r2
 8002434:	d0f0      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002436:	4b80      	ldr	r3, [pc, #512]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	23c0      	movs	r3, #192	; 0xc0
 800243c:	039b      	lsls	r3, r3, #14
 800243e:	4013      	ands	r3, r2
 8002440:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	23c0      	movs	r3, #192	; 0xc0
 8002448:	039b      	lsls	r3, r3, #14
 800244a:	4013      	ands	r3, r2
 800244c:	68fa      	ldr	r2, [r7, #12]
 800244e:	429a      	cmp	r2, r3
 8002450:	d013      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	23c0      	movs	r3, #192	; 0xc0
 8002458:	029b      	lsls	r3, r3, #10
 800245a:	401a      	ands	r2, r3
 800245c:	23c0      	movs	r3, #192	; 0xc0
 800245e:	029b      	lsls	r3, r3, #10
 8002460:	429a      	cmp	r2, r3
 8002462:	d10a      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002464:	4b74      	ldr	r3, [pc, #464]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	029b      	lsls	r3, r3, #10
 800246c:	401a      	ands	r2, r3
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	029b      	lsls	r3, r3, #10
 8002472:	429a      	cmp	r2, r3
 8002474:	d101      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0da      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x278>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800247a:	4b6f      	ldr	r3, [pc, #444]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800247c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800247e:	23c0      	movs	r3, #192	; 0xc0
 8002480:	029b      	lsls	r3, r3, #10
 8002482:	4013      	ands	r3, r2
 8002484:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03b      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	23c0      	movs	r3, #192	; 0xc0
 8002492:	029b      	lsls	r3, r3, #10
 8002494:	4013      	ands	r3, r2
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	429a      	cmp	r2, r3
 800249a:	d033      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2220      	movs	r2, #32
 80024a2:	4013      	ands	r3, r2
 80024a4:	d02e      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80024a6:	4b64      	ldr	r3, [pc, #400]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024aa:	4a65      	ldr	r2, [pc, #404]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024b0:	4b61      	ldr	r3, [pc, #388]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024b4:	4b60      	ldr	r3, [pc, #384]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	0309      	lsls	r1, r1, #12
 80024ba:	430a      	orrs	r2, r1
 80024bc:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024be:	4b5e      	ldr	r3, [pc, #376]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024c2:	4b5d      	ldr	r3, [pc, #372]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024c4:	495f      	ldr	r1, [pc, #380]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80024c6:	400a      	ands	r2, r1
 80024c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80024ca:	4b5b      	ldr	r3, [pc, #364]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4013      	ands	r3, r2
 80024d8:	d014      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024da:	f7fe fe31 	bl	8001140 <HAL_GetTick>
 80024de:	0003      	movs	r3, r0
 80024e0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024e2:	e009      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7fe fe2c 	bl	8001140 <HAL_GetTick>
 80024e8:	0002      	movs	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	4a56      	ldr	r2, [pc, #344]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e09b      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x278>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80024f8:	4b4f      	ldr	r3, [pc, #316]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4013      	ands	r3, r2
 8002502:	d0ef      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	23c0      	movs	r3, #192	; 0xc0
 800250a:	029b      	lsls	r3, r3, #10
 800250c:	401a      	ands	r2, r3
 800250e:	23c0      	movs	r3, #192	; 0xc0
 8002510:	029b      	lsls	r3, r3, #10
 8002512:	429a      	cmp	r2, r3
 8002514:	d10c      	bne.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002516:	4b48      	ldr	r3, [pc, #288]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a4c      	ldr	r2, [pc, #304]	; (800264c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800251c:	4013      	ands	r3, r2
 800251e:	0019      	movs	r1, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	23c0      	movs	r3, #192	; 0xc0
 8002526:	039b      	lsls	r3, r3, #14
 8002528:	401a      	ands	r2, r3
 800252a:	4b43      	ldr	r3, [pc, #268]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800252c:	430a      	orrs	r2, r1
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	4b41      	ldr	r3, [pc, #260]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002532:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685a      	ldr	r2, [r3, #4]
 8002538:	23c0      	movs	r3, #192	; 0xc0
 800253a:	029b      	lsls	r3, r3, #10
 800253c:	401a      	ands	r2, r3
 800253e:	4b3e      	ldr	r3, [pc, #248]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002540:	430a      	orrs	r2, r1
 8002542:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002544:	2317      	movs	r3, #23
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d105      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002552:	4b39      	ldr	r3, [pc, #228]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002554:	493e      	ldr	r1, [pc, #248]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8002556:	400a      	ands	r2, r1
 8002558:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2201      	movs	r2, #1
 8002560:	4013      	ands	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	2203      	movs	r2, #3
 800256a:	4393      	bics	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	4b31      	ldr	r3, [pc, #196]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002574:	430a      	orrs	r2, r1
 8002576:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2202      	movs	r2, #2
 800257e:	4013      	ands	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002582:	4b2d      	ldr	r3, [pc, #180]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002586:	220c      	movs	r2, #12
 8002588:	4393      	bics	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	4b29      	ldr	r3, [pc, #164]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002592:	430a      	orrs	r2, r1
 8002594:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2204      	movs	r2, #4
 800259c:	4013      	ands	r3, r2
 800259e:	d009      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a4:	4a2b      	ldr	r2, [pc, #172]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	0019      	movs	r1, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691a      	ldr	r2, [r3, #16]
 80025ae:	4b22      	ldr	r3, [pc, #136]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025b0:	430a      	orrs	r2, r1
 80025b2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2208      	movs	r2, #8
 80025ba:	4013      	ands	r3, r2
 80025bc:	d009      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025be:	4b1e      	ldr	r3, [pc, #120]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4a25      	ldr	r2, [pc, #148]	; (8002658 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	0019      	movs	r1, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ce:	430a      	orrs	r2, r1
 80025d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4013      	ands	r3, r2
 80025dc:	d009      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e2:	4a17      	ldr	r2, [pc, #92]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	699a      	ldr	r2, [r3, #24]
 80025ec:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2240      	movs	r2, #64	; 0x40
 80025f8:	4013      	ands	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025fc:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	4a16      	ldr	r2, [pc, #88]	; (800265c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002602:	4013      	ands	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a1a      	ldr	r2, [r3, #32]
 800260a:	4b0b      	ldr	r3, [pc, #44]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800260c:	430a      	orrs	r2, r1
 800260e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2280      	movs	r2, #128	; 0x80
 8002616:	4013      	ands	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800261c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261e:	4a10      	ldr	r2, [pc, #64]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002620:	4013      	ands	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69da      	ldr	r2, [r3, #28]
 8002628:	4b03      	ldr	r3, [pc, #12]	; (8002638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800262a:	430a      	orrs	r2, r1
 800262c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	0018      	movs	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	b006      	add	sp, #24
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	40007000 	.word	0x40007000
 8002640:	fffcffff 	.word	0xfffcffff
 8002644:	fff7ffff 	.word	0xfff7ffff
 8002648:	00001388 	.word	0x00001388
 800264c:	ffcfffff 	.word	0xffcfffff
 8002650:	efffffff 	.word	0xefffffff
 8002654:	fffff3ff 	.word	0xfffff3ff
 8002658:	ffffcfff 	.word	0xffffcfff
 800265c:	fbffffff 	.word	0xfbffffff
 8002660:	fff3ffff 	.word	0xfff3ffff

08002664 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e08e      	b.n	8002794 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2221      	movs	r2, #33	; 0x21
 800267a:	5c9b      	ldrb	r3, [r3, r2]
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d107      	bne.n	8002692 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2220      	movs	r2, #32
 8002686:	2100      	movs	r1, #0
 8002688:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f7fe fb9d 	bl	8000dcc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2221      	movs	r2, #33	; 0x21
 8002696:	2102      	movs	r1, #2
 8002698:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	22ca      	movs	r2, #202	; 0xca
 80026a0:	625a      	str	r2, [r3, #36]	; 0x24
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	2253      	movs	r2, #83	; 0x53
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	0018      	movs	r0, r3
 80026ae:	f000 fbb2 	bl	8002e16 <RTC_EnterInitMode>
 80026b2:	1e03      	subs	r3, r0, #0
 80026b4:	d009      	beq.n	80026ca <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	22ff      	movs	r2, #255	; 0xff
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2221      	movs	r2, #33	; 0x21
 80026c2:	2104      	movs	r1, #4
 80026c4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e064      	b.n	8002794 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4931      	ldr	r1, [pc, #196]	; (800279c <HAL_RTC_Init+0x138>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6899      	ldr	r1, [r3, #8]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	68d2      	ldr	r2, [r2, #12]
 8002700:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	6919      	ldr	r1, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	041a      	lsls	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	438a      	bics	r2, r1
 8002724:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2103      	movs	r1, #3
 8002732:	438a      	bics	r2, r1
 8002734:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	2220      	movs	r2, #32
 8002756:	4013      	ands	r3, r2
 8002758:	d113      	bne.n	8002782 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	0018      	movs	r0, r3
 800275e:	f000 fb33 	bl	8002dc8 <HAL_RTC_WaitForSynchro>
 8002762:	1e03      	subs	r3, r0, #0
 8002764:	d00d      	beq.n	8002782 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	22ff      	movs	r2, #255	; 0xff
 800276c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2221      	movs	r2, #33	; 0x21
 8002772:	2104      	movs	r1, #4
 8002774:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2220      	movs	r2, #32
 800277a:	2100      	movs	r1, #0
 800277c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e008      	b.n	8002794 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	22ff      	movs	r2, #255	; 0xff
 8002788:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2221      	movs	r2, #33	; 0x21
 800278e:	2101      	movs	r1, #1
 8002790:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002792:	2300      	movs	r3, #0
  }
}
 8002794:	0018      	movs	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	b002      	add	sp, #8
 800279a:	bd80      	pop	{r7, pc}
 800279c:	ff8fffbf 	.word	0xff8fffbf

080027a0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2220      	movs	r2, #32
 80027b0:	5c9b      	ldrb	r3, [r3, r2]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d101      	bne.n	80027ba <HAL_RTC_SetTime+0x1a>
 80027b6:	2302      	movs	r3, #2
 80027b8:	e0ad      	b.n	8002916 <HAL_RTC_SetTime+0x176>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	2101      	movs	r1, #1
 80027c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2221      	movs	r2, #33	; 0x21
 80027c6:	2102      	movs	r1, #2
 80027c8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d125      	bne.n	800281c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2240      	movs	r2, #64	; 0x40
 80027d8:	4013      	ands	r3, r2
 80027da:	d102      	bne.n	80027e2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2200      	movs	r2, #0
 80027e0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	0018      	movs	r0, r3
 80027e8:	f000 fb3f 	bl	8002e6a <RTC_ByteToBcd2>
 80027ec:	0003      	movs	r3, r0
 80027ee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	785b      	ldrb	r3, [r3, #1]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 fb38 	bl	8002e6a <RTC_ByteToBcd2>
 80027fa:	0003      	movs	r3, r0
 80027fc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80027fe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	789b      	ldrb	r3, [r3, #2]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 fb30 	bl	8002e6a <RTC_ByteToBcd2>
 800280a:	0003      	movs	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800280c:	0022      	movs	r2, r4
 800280e:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	78db      	ldrb	r3, [r3, #3]
 8002814:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e017      	b.n	800284c <HAL_RTC_SetTime+0xac>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2240      	movs	r2, #64	; 0x40
 8002824:	4013      	ands	r3, r2
 8002826:	d102      	bne.n	800282e <HAL_RTC_SetTime+0x8e>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2200      	movs	r2, #0
 800282c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	785b      	ldrb	r3, [r3, #1]
 8002838:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800283a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002840:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	78db      	ldrb	r3, [r3, #3]
 8002846:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	22ca      	movs	r2, #202	; 0xca
 8002852:	625a      	str	r2, [r3, #36]	; 0x24
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2253      	movs	r2, #83	; 0x53
 800285a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 fad9 	bl	8002e16 <RTC_EnterInitMode>
 8002864:	1e03      	subs	r3, r0, #0
 8002866:	d00d      	beq.n	8002884 <HAL_RTC_SetTime+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	22ff      	movs	r2, #255	; 0xff
 800286e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2221      	movs	r2, #33	; 0x21
 8002874:	2104      	movs	r1, #4
 8002876:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	2100      	movs	r1, #0
 800287e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e048      	b.n	8002916 <HAL_RTC_SetTime+0x176>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	4925      	ldr	r1, [pc, #148]	; (8002920 <HAL_RTC_SetTime+0x180>)
 800288c:	400a      	ands	r2, r1
 800288e:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4922      	ldr	r1, [pc, #136]	; (8002924 <HAL_RTC_SetTime+0x184>)
 800289c:	400a      	ands	r2, r1
 800289e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6899      	ldr	r1, [r3, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	431a      	orrs	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2180      	movs	r1, #128	; 0x80
 80028c4:	438a      	bics	r2, r1
 80028c6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	2220      	movs	r2, #32
 80028d0:	4013      	ands	r3, r2
 80028d2:	d113      	bne.n	80028fc <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f000 fa76 	bl	8002dc8 <HAL_RTC_WaitForSynchro>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d00d      	beq.n	80028fc <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	22ff      	movs	r2, #255	; 0xff
 80028e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2221      	movs	r2, #33	; 0x21
 80028ec:	2104      	movs	r1, #4
 80028ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	2100      	movs	r1, #0
 80028f6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e00c      	b.n	8002916 <HAL_RTC_SetTime+0x176>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	22ff      	movs	r2, #255	; 0xff
 8002902:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2221      	movs	r2, #33	; 0x21
 8002908:	2101      	movs	r1, #1
 800290a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hrtc);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2220      	movs	r2, #32
 8002910:	2100      	movs	r1, #0
 8002912:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
  }
}
 8002916:	0018      	movs	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	b007      	add	sp, #28
 800291c:	bd90      	pop	{r4, r7, pc}
 800291e:	46c0      	nop			; (mov r8, r8)
 8002920:	007f7f7f 	.word	0x007f7f7f
 8002924:	fffbffff 	.word	0xfffbffff

08002928 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002928:	b590      	push	{r4, r7, lr}
 800292a:	b087      	sub	sp, #28
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2220      	movs	r2, #32
 8002938:	5c9b      	ldrb	r3, [r3, r2]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_RTC_SetDate+0x1a>
 800293e:	2302      	movs	r3, #2
 8002940:	e099      	b.n	8002a76 <HAL_RTC_SetDate+0x14e>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2220      	movs	r2, #32
 8002946:	2101      	movs	r1, #1
 8002948:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2221      	movs	r2, #33	; 0x21
 800294e:	2102      	movs	r1, #2
 8002950:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d10e      	bne.n	8002976 <HAL_RTC_SetDate+0x4e>
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	785b      	ldrb	r3, [r3, #1]
 800295c:	001a      	movs	r2, r3
 800295e:	2310      	movs	r3, #16
 8002960:	4013      	ands	r3, r2
 8002962:	d008      	beq.n	8002976 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	785b      	ldrb	r3, [r3, #1]
 8002968:	2210      	movs	r2, #16
 800296a:	4393      	bics	r3, r2
 800296c:	b2db      	uxtb	r3, r3
 800296e:	330a      	adds	r3, #10
 8002970:	b2da      	uxtb	r2, r3
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d11c      	bne.n	80029b6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	78db      	ldrb	r3, [r3, #3]
 8002980:	0018      	movs	r0, r3
 8002982:	f000 fa72 	bl	8002e6a <RTC_ByteToBcd2>
 8002986:	0003      	movs	r3, r0
 8002988:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	785b      	ldrb	r3, [r3, #1]
 800298e:	0018      	movs	r0, r3
 8002990:	f000 fa6b 	bl	8002e6a <RTC_ByteToBcd2>
 8002994:	0003      	movs	r3, r0
 8002996:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002998:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	789b      	ldrb	r3, [r3, #2]
 800299e:	0018      	movs	r0, r3
 80029a0:	f000 fa63 	bl	8002e6a <RTC_ByteToBcd2>
 80029a4:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80029a6:	0022      	movs	r2, r4
 80029a8:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	e00e      	b.n	80029d4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	78db      	ldrb	r3, [r3, #3]
 80029ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	785b      	ldrb	r3, [r3, #1]
 80029c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80029c2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80029c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	22ca      	movs	r2, #202	; 0xca
 80029da:	625a      	str	r2, [r3, #36]	; 0x24
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2253      	movs	r2, #83	; 0x53
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 fa15 	bl	8002e16 <RTC_EnterInitMode>
 80029ec:	1e03      	subs	r3, r0, #0
 80029ee:	d00d      	beq.n	8002a0c <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	22ff      	movs	r2, #255	; 0xff
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2221      	movs	r2, #33	; 0x21
 80029fc:	2104      	movs	r1, #4
 80029fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	2100      	movs	r1, #0
 8002a06:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e034      	b.n	8002a76 <HAL_RTC_SetDate+0x14e>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	491b      	ldr	r1, [pc, #108]	; (8002a80 <HAL_RTC_SetDate+0x158>)
 8002a14:	400a      	ands	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	438a      	bics	r2, r1
 8002a26:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	4013      	ands	r3, r2
 8002a32:	d113      	bne.n	8002a5c <HAL_RTC_SetDate+0x134>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f000 f9c6 	bl	8002dc8 <HAL_RTC_WaitForSynchro>
 8002a3c:	1e03      	subs	r3, r0, #0
 8002a3e:	d00d      	beq.n	8002a5c <HAL_RTC_SetDate+0x134>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	22ff      	movs	r2, #255	; 0xff
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2221      	movs	r2, #33	; 0x21
 8002a4c:	2104      	movs	r1, #4
 8002a4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2220      	movs	r2, #32
 8002a54:	2100      	movs	r1, #0
 8002a56:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e00c      	b.n	8002a76 <HAL_RTC_SetDate+0x14e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	22ff      	movs	r2, #255	; 0xff
 8002a62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2221      	movs	r2, #33	; 0x21
 8002a68:	2101      	movs	r1, #1
 8002a6a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
  }
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b007      	add	sp, #28
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	00ffff3f 	.word	0x00ffff3f

08002a84 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	5c9b      	ldrb	r3, [r3, r2]
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d101      	bne.n	8002a9e <HAL_RTC_SetAlarm_IT+0x1a>
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	e130      	b.n	8002d00 <HAL_RTC_SetAlarm_IT+0x27c>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	2101      	movs	r1, #1
 8002aa4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2221      	movs	r2, #33	; 0x21
 8002aaa:	2102      	movs	r1, #2
 8002aac:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d136      	bne.n	8002b22 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	2240      	movs	r2, #64	; 0x40
 8002abc:	4013      	ands	r3, r2
 8002abe:	d102      	bne.n	8002ac6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f000 f9cd 	bl	8002e6a <RTC_ByteToBcd2>
 8002ad0:	0003      	movs	r3, r0
 8002ad2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	785b      	ldrb	r3, [r3, #1]
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 f9c6 	bl	8002e6a <RTC_ByteToBcd2>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ae2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	789b      	ldrb	r3, [r3, #2]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 f9be 	bl	8002e6a <RTC_ByteToBcd2>
 8002aee:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002af0:	0022      	movs	r2, r4
 8002af2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	78db      	ldrb	r3, [r3, #3]
 8002af8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002afa:	431a      	orrs	r2, r3
 8002afc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2220      	movs	r2, #32
 8002b02:	5c9b      	ldrb	r3, [r3, r2]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f000 f9b0 	bl	8002e6a <RTC_ByteToBcd2>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002b0e:	0022      	movs	r2, r4
 8002b10:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002b16:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61fb      	str	r3, [r7, #28]
 8002b20:	e022      	b.n	8002b68 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	2240      	movs	r2, #64	; 0x40
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d102      	bne.n	8002b34 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2200      	movs	r2, #0
 8002b32:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	785b      	ldrb	r3, [r3, #1]
 8002b3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b40:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002b46:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	78db      	ldrb	r3, [r3, #3]
 8002b4c:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002b4e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2120      	movs	r1, #32
 8002b54:	5c5b      	ldrb	r3, [r3, r1]
 8002b56:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002b58:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002b5e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	22ca      	movs	r2, #202	; 0xca
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2253      	movs	r2, #83	; 0x53
 8002b82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b88:	2380      	movs	r3, #128	; 0x80
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d14e      	bne.n	8002c2e <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	495b      	ldr	r1, [pc, #364]	; (8002d08 <HAL_RTC_SetAlarm_IT+0x284>)
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	22ff      	movs	r2, #255	; 0xff
 8002ba8:	401a      	ands	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4957      	ldr	r1, [pc, #348]	; (8002d0c <HAL_RTC_SetAlarm_IT+0x288>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002bb4:	f7fe fac4 	bl	8001140 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002bbc:	e016      	b.n	8002bec <HAL_RTC_SetAlarm_IT+0x168>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bbe:	f7fe fabf 	bl	8001140 <HAL_GetTick>
 8002bc2:	0002      	movs	r2, r0
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	1ad2      	subs	r2, r2, r3
 8002bc8:	23fa      	movs	r3, #250	; 0xfa
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d90d      	bls.n	8002bec <HAL_RTC_SetAlarm_IT+0x168>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	22ff      	movs	r2, #255	; 0xff
 8002bd6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2221      	movs	r2, #33	; 0x21
 8002bdc:	2103      	movs	r1, #3
 8002bde:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e089      	b.n	8002d00 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d0e2      	beq.n	8002bbe <HAL_RTC_SetAlarm_IT+0x13a>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	0049      	lsls	r1, r1, #1
 8002c16:	430a      	orrs	r2, r1
 8002c18:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0149      	lsls	r1, r1, #5
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	e04d      	b.n	8002cca <HAL_RTC_SetAlarm_IT+0x246>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689a      	ldr	r2, [r3, #8]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4935      	ldr	r1, [pc, #212]	; (8002d10 <HAL_RTC_SetAlarm_IT+0x28c>)
 8002c3a:	400a      	ands	r2, r1
 8002c3c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	22ff      	movs	r2, #255	; 0xff
 8002c46:	401a      	ands	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4931      	ldr	r1, [pc, #196]	; (8002d14 <HAL_RTC_SetAlarm_IT+0x290>)
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c52:	f7fe fa75 	bl	8001140 <HAL_GetTick>
 8002c56:	0003      	movs	r3, r0
 8002c58:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c5a:	e016      	b.n	8002c8a <HAL_RTC_SetAlarm_IT+0x206>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c5c:	f7fe fa70 	bl	8001140 <HAL_GetTick>
 8002c60:	0002      	movs	r2, r0
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	1ad2      	subs	r2, r2, r3
 8002c66:	23fa      	movs	r3, #250	; 0xfa
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d90d      	bls.n	8002c8a <HAL_RTC_SetAlarm_IT+0x206>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	22ff      	movs	r2, #255	; 0xff
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2221      	movs	r2, #33	; 0x21
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2220      	movs	r2, #32
 8002c82:	2100      	movs	r1, #0
 8002c84:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e03a      	b.n	8002d00 <HAL_RTC_SetAlarm_IT+0x27c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2202      	movs	r2, #2
 8002c92:	4013      	ands	r3, r2
 8002c94:	d0e2      	beq.n	8002c5c <HAL_RTC_SetAlarm_IT+0x1d8>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2180      	movs	r1, #128	; 0x80
 8002cb2:	0089      	lsls	r1, r1, #2
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689a      	ldr	r2, [r3, #8]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	2180      	movs	r1, #128	; 0x80
 8002cc4:	0189      	lsls	r1, r1, #6
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002cca:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <HAL_RTC_SetAlarm_IT+0x294>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_RTC_SetAlarm_IT+0x294>)
 8002cd0:	2180      	movs	r1, #128	; 0x80
 8002cd2:	0289      	lsls	r1, r1, #10
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002cd8:	4b0f      	ldr	r3, [pc, #60]	; (8002d18 <HAL_RTC_SetAlarm_IT+0x294>)
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_RTC_SetAlarm_IT+0x294>)
 8002cde:	2180      	movs	r1, #128	; 0x80
 8002ce0:	0289      	lsls	r1, r1, #10
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	22ff      	movs	r2, #255	; 0xff
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2221      	movs	r2, #33	; 0x21
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b009      	add	sp, #36	; 0x24
 8002d06:	bd90      	pop	{r4, r7, pc}
 8002d08:	fffffeff 	.word	0xfffffeff
 8002d0c:	fffffe7f 	.word	0xfffffe7f
 8002d10:	fffffdff 	.word	0xfffffdff
 8002d14:	fffffd7f 	.word	0xfffffd7f
 8002d18:	40010400 	.word	0x40010400

08002d1c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	2380      	movs	r3, #128	; 0x80
 8002d2c:	015b      	lsls	r3, r3, #5
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d014      	beq.n	8002d5c <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	2380      	movs	r3, #128	; 0x80
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d00d      	beq.n	8002d5c <HAL_RTC_AlarmIRQHandler+0x40>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f838 	bl	8002db8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	22ff      	movs	r2, #255	; 0xff
 8002d50:	401a      	ands	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4915      	ldr	r1, [pc, #84]	; (8002dac <HAL_RTC_AlarmIRQHandler+0x90>)
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	019b      	lsls	r3, r3, #6
 8002d66:	4013      	ands	r3, r2
 8002d68:	d014      	beq.n	8002d94 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	2380      	movs	r3, #128	; 0x80
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4013      	ands	r3, r2
 8002d76:	d00d      	beq.n	8002d94 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f89d 	bl	8002eba <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	22ff      	movs	r2, #255	; 0xff
 8002d88:	401a      	ands	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4908      	ldr	r1, [pc, #32]	; (8002db0 <HAL_RTC_AlarmIRQHandler+0x94>)
 8002d90:	430a      	orrs	r2, r1
 8002d92:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002d94:	4b07      	ldr	r3, [pc, #28]	; (8002db4 <HAL_RTC_AlarmIRQHandler+0x98>)
 8002d96:	2280      	movs	r2, #128	; 0x80
 8002d98:	0292      	lsls	r2, r2, #10
 8002d9a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2221      	movs	r2, #33	; 0x21
 8002da0:	2101      	movs	r1, #1
 8002da2:	5499      	strb	r1, [r3, r2]
}
 8002da4:	46c0      	nop			; (mov r8, r8)
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b002      	add	sp, #8
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	fffffe7f 	.word	0xfffffe7f
 8002db0:	fffffd7f 	.word	0xfffffd7f
 8002db4:	40010400 	.word	0x40010400

08002db8 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002dc0:	46c0      	nop			; (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	21a0      	movs	r1, #160	; 0xa0
 8002ddc:	438a      	bics	r2, r1
 8002dde:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002de0:	f7fe f9ae 	bl	8001140 <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002de8:	e00a      	b.n	8002e00 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002dea:	f7fe f9a9 	bl	8001140 <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	1ad2      	subs	r2, r2, r3
 8002df4:	23fa      	movs	r3, #250	; 0xfa
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d901      	bls.n	8002e00 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e006      	b.n	8002e0e <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d0ee      	beq.n	8002dea <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b004      	add	sp, #16
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b084      	sub	sp, #16
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2240      	movs	r2, #64	; 0x40
 8002e26:	4013      	ands	r3, r2
 8002e28:	d11a      	bne.n	8002e60 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4252      	negs	r2, r2
 8002e32:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e34:	f7fe f984 	bl	8001140 <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e3c:	e00a      	b.n	8002e54 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002e3e:	f7fe f97f 	bl	8001140 <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad2      	subs	r2, r2, r3
 8002e48:	23fa      	movs	r3, #250	; 0xfa
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d901      	bls.n	8002e54 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e006      	b.n	8002e62 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	2240      	movs	r2, #64	; 0x40
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d0ee      	beq.n	8002e3e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	0018      	movs	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	b004      	add	sp, #16
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b084      	sub	sp, #16
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	0002      	movs	r2, r0
 8002e72:	1dfb      	adds	r3, r7, #7
 8002e74:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002e7a:	230b      	movs	r3, #11
 8002e7c:	18fb      	adds	r3, r7, r3
 8002e7e:	1dfa      	adds	r2, r7, #7
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002e84:	e008      	b.n	8002e98 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002e8c:	220b      	movs	r2, #11
 8002e8e:	18bb      	adds	r3, r7, r2
 8002e90:	18ba      	adds	r2, r7, r2
 8002e92:	7812      	ldrb	r2, [r2, #0]
 8002e94:	3a0a      	subs	r2, #10
 8002e96:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002e98:	210b      	movs	r1, #11
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b09      	cmp	r3, #9
 8002ea0:	d8f1      	bhi.n	8002e86 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	187b      	adds	r3, r7, r1
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	b2db      	uxtb	r3, r3
}
 8002eb2:	0018      	movs	r0, r3
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	b004      	add	sp, #16
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e083      	b.n	8002fe6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685a      	ldr	r2, [r3, #4]
 8002eea:	2382      	movs	r3, #130	; 0x82
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d009      	beq.n	8002f06 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	61da      	str	r2, [r3, #28]
 8002ef8:	e005      	b.n	8002f06 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2251      	movs	r2, #81	; 0x51
 8002f10:	5c9b      	ldrb	r3, [r3, r2]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d107      	bne.n	8002f28 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2250      	movs	r2, #80	; 0x50
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	0018      	movs	r0, r3
 8002f24:	f7fd ff72 	bl	8000e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2251      	movs	r2, #81	; 0x51
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2140      	movs	r1, #64	; 0x40
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	2382      	movs	r3, #130	; 0x82
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	401a      	ands	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6899      	ldr	r1, [r3, #8]
 8002f4e:	2384      	movs	r3, #132	; 0x84
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	400b      	ands	r3, r1
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	68d9      	ldr	r1, [r3, #12]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	011b      	lsls	r3, r3, #4
 8002f5e:	400b      	ands	r3, r1
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	2102      	movs	r1, #2
 8002f68:	400b      	ands	r3, r1
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	2101      	movs	r1, #1
 8002f72:	400b      	ands	r3, r1
 8002f74:	431a      	orrs	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6999      	ldr	r1, [r3, #24]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	400b      	ands	r3, r1
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	2138      	movs	r1, #56	; 0x38
 8002f88:	400b      	ands	r3, r1
 8002f8a:	431a      	orrs	r2, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	2180      	movs	r1, #128	; 0x80
 8002f92:	400b      	ands	r3, r1
 8002f94:	431a      	orrs	r2, r3
 8002f96:	0011      	movs	r1, r2
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	019b      	lsls	r3, r3, #6
 8002fa0:	401a      	ands	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	0c1b      	lsrs	r3, r3, #16
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2210      	movs	r2, #16
 8002fbc:	401a      	ands	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4907      	ldr	r1, [pc, #28]	; (8002ff0 <HAL_SPI_Init+0x124>)
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2251      	movs	r2, #81	; 0x51
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	b002      	add	sp, #8
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	fffff7ff 	.word	0xfffff7ff

08002ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e044      	b.n	8003090 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800300a:	2b00      	cmp	r3, #0
 800300c:	d107      	bne.n	800301e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2274      	movs	r2, #116	; 0x74
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f7fd ff5d 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2224      	movs	r2, #36	; 0x24
 8003022:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2101      	movs	r1, #1
 8003030:	438a      	bics	r2, r1
 8003032:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	0018      	movs	r0, r3
 8003038:	f000 fb26 	bl	8003688 <UART_SetConfig>
 800303c:	0003      	movs	r3, r0
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e024      	b.n	8003090 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	0018      	movs	r0, r3
 8003052:	f000 fdb9 	bl	8003bc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	490d      	ldr	r1, [pc, #52]	; (8003098 <HAL_UART_Init+0xa4>)
 8003062:	400a      	ands	r2, r1
 8003064:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	212a      	movs	r1, #42	; 0x2a
 8003072:	438a      	bics	r2, r1
 8003074:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	430a      	orrs	r2, r1
 8003084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f000 fe51 	bl	8003d30 <UART_CheckIdleState>
 800308e:	0003      	movs	r3, r0
}
 8003090:	0018      	movs	r0, r3
 8003092:	46bd      	mov	sp, r7
 8003094:	b002      	add	sp, #8
 8003096:	bd80      	pop	{r7, pc}
 8003098:	ffffb7ff 	.word	0xffffb7ff

0800309c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b0ab      	sub	sp, #172	; 0xac
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	22a4      	movs	r2, #164	; 0xa4
 80030ac:	18b9      	adds	r1, r7, r2
 80030ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	20a0      	movs	r0, #160	; 0xa0
 80030b8:	1839      	adds	r1, r7, r0
 80030ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	219c      	movs	r1, #156	; 0x9c
 80030c4:	1879      	adds	r1, r7, r1
 80030c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030c8:	0011      	movs	r1, r2
 80030ca:	18bb      	adds	r3, r7, r2
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a99      	ldr	r2, [pc, #612]	; (8003334 <HAL_UART_IRQHandler+0x298>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	2298      	movs	r2, #152	; 0x98
 80030d4:	18bc      	adds	r4, r7, r2
 80030d6:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80030d8:	18bb      	adds	r3, r7, r2
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d114      	bne.n	800310a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2220      	movs	r2, #32
 80030e6:	4013      	ands	r3, r2
 80030e8:	d00f      	beq.n	800310a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80030ea:	183b      	adds	r3, r7, r0
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2220      	movs	r2, #32
 80030f0:	4013      	ands	r3, r2
 80030f2:	d00a      	beq.n	800310a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d100      	bne.n	80030fe <HAL_UART_IRQHandler+0x62>
 80030fc:	e298      	b.n	8003630 <HAL_UART_IRQHandler+0x594>
      {
        huart->RxISR(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	0010      	movs	r0, r2
 8003106:	4798      	blx	r3
      }
      return;
 8003108:	e292      	b.n	8003630 <HAL_UART_IRQHandler+0x594>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800310a:	2398      	movs	r3, #152	; 0x98
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d100      	bne.n	8003116 <HAL_UART_IRQHandler+0x7a>
 8003114:	e114      	b.n	8003340 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003116:	239c      	movs	r3, #156	; 0x9c
 8003118:	18fb      	adds	r3, r7, r3
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2201      	movs	r2, #1
 800311e:	4013      	ands	r3, r2
 8003120:	d106      	bne.n	8003130 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003122:	23a0      	movs	r3, #160	; 0xa0
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a83      	ldr	r2, [pc, #524]	; (8003338 <HAL_UART_IRQHandler+0x29c>)
 800312a:	4013      	ands	r3, r2
 800312c:	d100      	bne.n	8003130 <HAL_UART_IRQHandler+0x94>
 800312e:	e107      	b.n	8003340 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003130:	23a4      	movs	r3, #164	; 0xa4
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2201      	movs	r2, #1
 8003138:	4013      	ands	r3, r2
 800313a:	d012      	beq.n	8003162 <HAL_UART_IRQHandler+0xc6>
 800313c:	23a0      	movs	r3, #160	; 0xa0
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	4013      	ands	r3, r2
 8003148:	d00b      	beq.n	8003162 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2201      	movs	r2, #1
 8003150:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2280      	movs	r2, #128	; 0x80
 8003156:	589b      	ldr	r3, [r3, r2]
 8003158:	2201      	movs	r2, #1
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2180      	movs	r1, #128	; 0x80
 8003160:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003162:	23a4      	movs	r3, #164	; 0xa4
 8003164:	18fb      	adds	r3, r7, r3
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2202      	movs	r2, #2
 800316a:	4013      	ands	r3, r2
 800316c:	d011      	beq.n	8003192 <HAL_UART_IRQHandler+0xf6>
 800316e:	239c      	movs	r3, #156	; 0x9c
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	4013      	ands	r3, r2
 8003178:	d00b      	beq.n	8003192 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2202      	movs	r2, #2
 8003180:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2280      	movs	r2, #128	; 0x80
 8003186:	589b      	ldr	r3, [r3, r2]
 8003188:	2204      	movs	r2, #4
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2180      	movs	r1, #128	; 0x80
 8003190:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003192:	23a4      	movs	r3, #164	; 0xa4
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2204      	movs	r2, #4
 800319a:	4013      	ands	r3, r2
 800319c:	d011      	beq.n	80031c2 <HAL_UART_IRQHandler+0x126>
 800319e:	239c      	movs	r3, #156	; 0x9c
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2201      	movs	r2, #1
 80031a6:	4013      	ands	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2204      	movs	r2, #4
 80031b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2280      	movs	r2, #128	; 0x80
 80031b6:	589b      	ldr	r3, [r3, r2]
 80031b8:	2202      	movs	r2, #2
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031c2:	23a4      	movs	r3, #164	; 0xa4
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2208      	movs	r2, #8
 80031ca:	4013      	ands	r3, r2
 80031cc:	d017      	beq.n	80031fe <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031ce:	23a0      	movs	r3, #160	; 0xa0
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2220      	movs	r2, #32
 80031d6:	4013      	ands	r3, r2
 80031d8:	d105      	bne.n	80031e6 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031da:	239c      	movs	r3, #156	; 0x9c
 80031dc:	18fb      	adds	r3, r7, r3
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2201      	movs	r2, #1
 80031e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031e4:	d00b      	beq.n	80031fe <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2208      	movs	r2, #8
 80031ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	589b      	ldr	r3, [r3, r2]
 80031f4:	2208      	movs	r2, #8
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2180      	movs	r1, #128	; 0x80
 80031fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031fe:	23a4      	movs	r3, #164	; 0xa4
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	4013      	ands	r3, r2
 800320a:	d013      	beq.n	8003234 <HAL_UART_IRQHandler+0x198>
 800320c:	23a0      	movs	r3, #160	; 0xa0
 800320e:	18fb      	adds	r3, r7, r3
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	04db      	lsls	r3, r3, #19
 8003216:	4013      	ands	r3, r2
 8003218:	d00c      	beq.n	8003234 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2280      	movs	r2, #128	; 0x80
 8003220:	0112      	lsls	r2, r2, #4
 8003222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2280      	movs	r2, #128	; 0x80
 8003228:	589b      	ldr	r3, [r3, r2]
 800322a:	2220      	movs	r2, #32
 800322c:	431a      	orrs	r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2280      	movs	r2, #128	; 0x80
 8003238:	589b      	ldr	r3, [r3, r2]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d100      	bne.n	8003240 <HAL_UART_IRQHandler+0x1a4>
 800323e:	e1f9      	b.n	8003634 <HAL_UART_IRQHandler+0x598>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003240:	23a4      	movs	r3, #164	; 0xa4
 8003242:	18fb      	adds	r3, r7, r3
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2220      	movs	r2, #32
 8003248:	4013      	ands	r3, r2
 800324a:	d00e      	beq.n	800326a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800324c:	23a0      	movs	r3, #160	; 0xa0
 800324e:	18fb      	adds	r3, r7, r3
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2220      	movs	r2, #32
 8003254:	4013      	ands	r3, r2
 8003256:	d008      	beq.n	800326a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	0010      	movs	r0, r2
 8003268:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2280      	movs	r2, #128	; 0x80
 800326e:	589b      	ldr	r3, [r3, r2]
 8003270:	2194      	movs	r1, #148	; 0x94
 8003272:	187a      	adds	r2, r7, r1
 8003274:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2240      	movs	r2, #64	; 0x40
 800327e:	4013      	ands	r3, r2
 8003280:	2b40      	cmp	r3, #64	; 0x40
 8003282:	d004      	beq.n	800328e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003284:	187b      	adds	r3, r7, r1
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2228      	movs	r2, #40	; 0x28
 800328a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800328c:	d047      	beq.n	800331e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	0018      	movs	r0, r3
 8003292:	f000 fe59 	bl	8003f48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2240      	movs	r2, #64	; 0x40
 800329e:	4013      	ands	r3, r2
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d137      	bne.n	8003314 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a4:	f3ef 8310 	mrs	r3, PRIMASK
 80032a8:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80032aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ac:	2090      	movs	r0, #144	; 0x90
 80032ae:	183a      	adds	r2, r7, r0
 80032b0:	6013      	str	r3, [r2, #0]
 80032b2:	2301      	movs	r3, #1
 80032b4:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032b8:	f383 8810 	msr	PRIMASK, r3
}
 80032bc:	46c0      	nop			; (mov r8, r8)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2140      	movs	r1, #64	; 0x40
 80032ca:	438a      	bics	r2, r1
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	183b      	adds	r3, r7, r0
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80032d6:	f383 8810 	msr	PRIMASK, r3
}
 80032da:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d012      	beq.n	800330a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	4a14      	ldr	r2, [pc, #80]	; (800333c <HAL_UART_IRQHandler+0x2a0>)
 80032ea:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	0018      	movs	r0, r3
 80032f2:	f7fe f84d 	bl	8001390 <HAL_DMA_Abort_IT>
 80032f6:	1e03      	subs	r3, r0, #0
 80032f8:	d01a      	beq.n	8003330 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	0018      	movs	r0, r3
 8003306:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003308:	e012      	b.n	8003330 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0018      	movs	r0, r3
 800330e:	f000 f9a7 	bl	8003660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003312:	e00d      	b.n	8003330 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	0018      	movs	r0, r3
 8003318:	f000 f9a2 	bl	8003660 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	e008      	b.n	8003330 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0018      	movs	r0, r3
 8003322:	f000 f99d 	bl	8003660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2280      	movs	r2, #128	; 0x80
 800332a:	2100      	movs	r1, #0
 800332c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800332e:	e181      	b.n	8003634 <HAL_UART_IRQHandler+0x598>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	46c0      	nop			; (mov r8, r8)
    return;
 8003332:	e17f      	b.n	8003634 <HAL_UART_IRQHandler+0x598>
 8003334:	0000080f 	.word	0x0000080f
 8003338:	04000120 	.word	0x04000120
 800333c:	0800400d 	.word	0x0800400d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003344:	2b01      	cmp	r3, #1
 8003346:	d000      	beq.n	800334a <HAL_UART_IRQHandler+0x2ae>
 8003348:	e133      	b.n	80035b2 <HAL_UART_IRQHandler+0x516>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800334a:	23a4      	movs	r3, #164	; 0xa4
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2210      	movs	r2, #16
 8003352:	4013      	ands	r3, r2
 8003354:	d100      	bne.n	8003358 <HAL_UART_IRQHandler+0x2bc>
 8003356:	e12c      	b.n	80035b2 <HAL_UART_IRQHandler+0x516>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003358:	23a0      	movs	r3, #160	; 0xa0
 800335a:	18fb      	adds	r3, r7, r3
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2210      	movs	r2, #16
 8003360:	4013      	ands	r3, r2
 8003362:	d100      	bne.n	8003366 <HAL_UART_IRQHandler+0x2ca>
 8003364:	e125      	b.n	80035b2 <HAL_UART_IRQHandler+0x516>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2210      	movs	r2, #16
 800336c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	2240      	movs	r2, #64	; 0x40
 8003376:	4013      	ands	r3, r2
 8003378:	2b40      	cmp	r3, #64	; 0x40
 800337a:	d000      	beq.n	800337e <HAL_UART_IRQHandler+0x2e2>
 800337c:	e09d      	b.n	80034ba <HAL_UART_IRQHandler+0x41e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685a      	ldr	r2, [r3, #4]
 8003386:	217e      	movs	r1, #126	; 0x7e
 8003388:	187b      	adds	r3, r7, r1
 800338a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800338c:	187b      	adds	r3, r7, r1
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d100      	bne.n	8003396 <HAL_UART_IRQHandler+0x2fa>
 8003394:	e150      	b.n	8003638 <HAL_UART_IRQHandler+0x59c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2258      	movs	r2, #88	; 0x58
 800339a:	5a9b      	ldrh	r3, [r3, r2]
 800339c:	187a      	adds	r2, r7, r1
 800339e:	8812      	ldrh	r2, [r2, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d300      	bcc.n	80033a6 <HAL_UART_IRQHandler+0x30a>
 80033a4:	e148      	b.n	8003638 <HAL_UART_IRQHandler+0x59c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	187a      	adds	r2, r7, r1
 80033aa:	215a      	movs	r1, #90	; 0x5a
 80033ac:	8812      	ldrh	r2, [r2, #0]
 80033ae:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2220      	movs	r2, #32
 80033ba:	4013      	ands	r3, r2
 80033bc:	d16e      	bne.n	800349c <HAL_UART_IRQHandler+0x400>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80033c8:	2301      	movs	r3, #1
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ce:	f383 8810 	msr	PRIMASK, r3
}
 80033d2:	46c0      	nop			; (mov r8, r8)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	499a      	ldr	r1, [pc, #616]	; (8003648 <HAL_UART_IRQHandler+0x5ac>)
 80033e0:	400a      	ands	r2, r1
 80033e2:	601a      	str	r2, [r3, #0]
 80033e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ea:	f383 8810 	msr	PRIMASK, r3
}
 80033ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f0:	f3ef 8310 	mrs	r3, PRIMASK
 80033f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80033f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f8:	677b      	str	r3, [r7, #116]	; 0x74
 80033fa:	2301      	movs	r3, #1
 80033fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			; (mov r8, r8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2101      	movs	r1, #1
 8003412:	438a      	bics	r2, r1
 8003414:	609a      	str	r2, [r3, #8]
 8003416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800341c:	f383 8810 	msr	PRIMASK, r3
}
 8003420:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003422:	f3ef 8310 	mrs	r3, PRIMASK
 8003426:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003428:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342a:	673b      	str	r3, [r7, #112]	; 0x70
 800342c:	2301      	movs	r3, #1
 800342e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			; (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2140      	movs	r1, #64	; 0x40
 8003444:	438a      	bics	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800344a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2220      	movs	r2, #32
 8003458:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003460:	f3ef 8310 	mrs	r3, PRIMASK
 8003464:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003466:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003468:	66fb      	str	r3, [r7, #108]	; 0x6c
 800346a:	2301      	movs	r3, #1
 800346c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003470:	f383 8810 	msr	PRIMASK, r3
}
 8003474:	46c0      	nop			; (mov r8, r8)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2110      	movs	r1, #16
 8003482:	438a      	bics	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003488:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800348c:	f383 8810 	msr	PRIMASK, r3
}
 8003490:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003496:	0018      	movs	r0, r3
 8003498:	f7fd ff3a 	bl	8001310 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2258      	movs	r2, #88	; 0x58
 80034a0:	5a9a      	ldrh	r2, [r3, r2]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	215a      	movs	r1, #90	; 0x5a
 80034a6:	5a5b      	ldrh	r3, [r3, r1]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	0011      	movs	r1, r2
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 f8dc 	bl	8003670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034b8:	e0be      	b.n	8003638 <HAL_UART_IRQHandler+0x59c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2258      	movs	r2, #88	; 0x58
 80034be:	5a99      	ldrh	r1, [r3, r2]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	225a      	movs	r2, #90	; 0x5a
 80034c4:	5a9b      	ldrh	r3, [r3, r2]
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	208e      	movs	r0, #142	; 0x8e
 80034ca:	183b      	adds	r3, r7, r0
 80034cc:	1a8a      	subs	r2, r1, r2
 80034ce:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	225a      	movs	r2, #90	; 0x5a
 80034d4:	5a9b      	ldrh	r3, [r3, r2]
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d100      	bne.n	80034de <HAL_UART_IRQHandler+0x442>
 80034dc:	e0ae      	b.n	800363c <HAL_UART_IRQHandler+0x5a0>
          && (nb_rx_data > 0U))
 80034de:	183b      	adds	r3, r7, r0
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d100      	bne.n	80034e8 <HAL_UART_IRQHandler+0x44c>
 80034e6:	e0a9      	b.n	800363c <HAL_UART_IRQHandler+0x5a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e8:	f3ef 8310 	mrs	r3, PRIMASK
 80034ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80034ee:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034f0:	2488      	movs	r4, #136	; 0x88
 80034f2:	193a      	adds	r2, r7, r4
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	2301      	movs	r3, #1
 80034f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f383 8810 	msr	PRIMASK, r3
}
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	494f      	ldr	r1, [pc, #316]	; (800364c <HAL_UART_IRQHandler+0x5b0>)
 800350e:	400a      	ands	r2, r1
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	193b      	adds	r3, r7, r4
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003520:	f3ef 8310 	mrs	r3, PRIMASK
 8003524:	61bb      	str	r3, [r7, #24]
  return(result);
 8003526:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003528:	2484      	movs	r4, #132	; 0x84
 800352a:	193a      	adds	r2, r7, r4
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	2301      	movs	r3, #1
 8003530:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f383 8810 	msr	PRIMASK, r3
}
 8003538:	46c0      	nop			; (mov r8, r8)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	438a      	bics	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
 800354a:	193b      	adds	r3, r7, r4
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800356a:	f3ef 8310 	mrs	r3, PRIMASK
 800356e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003572:	2480      	movs	r4, #128	; 0x80
 8003574:	193a      	adds	r2, r7, r4
 8003576:	6013      	str	r3, [r2, #0]
 8003578:	2301      	movs	r3, #1
 800357a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	f383 8810 	msr	PRIMASK, r3
}
 8003582:	46c0      	nop			; (mov r8, r8)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2110      	movs	r1, #16
 8003590:	438a      	bics	r2, r1
 8003592:	601a      	str	r2, [r3, #0]
 8003594:	193b      	adds	r3, r7, r4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359c:	f383 8810 	msr	PRIMASK, r3
}
 80035a0:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035a2:	183b      	adds	r3, r7, r0
 80035a4:	881a      	ldrh	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	0011      	movs	r1, r2
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 f860 	bl	8003670 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035b0:	e044      	b.n	800363c <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035b2:	23a4      	movs	r3, #164	; 0xa4
 80035b4:	18fb      	adds	r3, r7, r3
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	2380      	movs	r3, #128	; 0x80
 80035ba:	035b      	lsls	r3, r3, #13
 80035bc:	4013      	ands	r3, r2
 80035be:	d010      	beq.n	80035e2 <HAL_UART_IRQHandler+0x546>
 80035c0:	239c      	movs	r3, #156	; 0x9c
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	03db      	lsls	r3, r3, #15
 80035ca:	4013      	ands	r3, r2
 80035cc:	d009      	beq.n	80035e2 <HAL_UART_IRQHandler+0x546>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	0352      	lsls	r2, r2, #13
 80035d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f000 fd58 	bl	8004090 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035e0:	e02f      	b.n	8003642 <HAL_UART_IRQHandler+0x5a6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035e2:	23a4      	movs	r3, #164	; 0xa4
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2280      	movs	r2, #128	; 0x80
 80035ea:	4013      	ands	r3, r2
 80035ec:	d00f      	beq.n	800360e <HAL_UART_IRQHandler+0x572>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035ee:	23a0      	movs	r3, #160	; 0xa0
 80035f0:	18fb      	adds	r3, r7, r3
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2280      	movs	r2, #128	; 0x80
 80035f6:	4013      	ands	r3, r2
 80035f8:	d009      	beq.n	800360e <HAL_UART_IRQHandler+0x572>
  {
    if (huart->TxISR != NULL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d01e      	beq.n	8003640 <HAL_UART_IRQHandler+0x5a4>
    {
      huart->TxISR(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	0010      	movs	r0, r2
 800360a:	4798      	blx	r3
    }
    return;
 800360c:	e018      	b.n	8003640 <HAL_UART_IRQHandler+0x5a4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800360e:	23a4      	movs	r3, #164	; 0xa4
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2240      	movs	r2, #64	; 0x40
 8003616:	4013      	ands	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_UART_IRQHandler+0x5a6>
 800361a:	23a0      	movs	r3, #160	; 0xa0
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2240      	movs	r2, #64	; 0x40
 8003622:	4013      	ands	r3, r2
 8003624:	d00d      	beq.n	8003642 <HAL_UART_IRQHandler+0x5a6>
  {
    UART_EndTransmit_IT(huart);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	0018      	movs	r0, r3
 800362a:	f000 fd06 	bl	800403a <UART_EndTransmit_IT>
    return;
 800362e:	e008      	b.n	8003642 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003630:	46c0      	nop			; (mov r8, r8)
 8003632:	e006      	b.n	8003642 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003634:	46c0      	nop			; (mov r8, r8)
 8003636:	e004      	b.n	8003642 <HAL_UART_IRQHandler+0x5a6>
      return;
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	e002      	b.n	8003642 <HAL_UART_IRQHandler+0x5a6>
      return;
 800363c:	46c0      	nop			; (mov r8, r8)
 800363e:	e000      	b.n	8003642 <HAL_UART_IRQHandler+0x5a6>
    return;
 8003640:	46c0      	nop			; (mov r8, r8)
  }

}
 8003642:	46bd      	mov	sp, r7
 8003644:	b02b      	add	sp, #172	; 0xac
 8003646:	bd90      	pop	{r4, r7, pc}
 8003648:	fffffeff 	.word	0xfffffeff
 800364c:	fffffedf 	.word	0xfffffedf

08003650 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003658:	46c0      	nop			; (mov r8, r8)
 800365a:	46bd      	mov	sp, r7
 800365c:	b002      	add	sp, #8
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003668:	46c0      	nop			; (mov r8, r8)
 800366a:	46bd      	mov	sp, r7
 800366c:	b002      	add	sp, #8
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	000a      	movs	r2, r1
 800367a:	1cbb      	adds	r3, r7, #2
 800367c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	46bd      	mov	sp, r7
 8003682:	b002      	add	sp, #8
 8003684:	bd80      	pop	{r7, pc}
	...

08003688 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003688:	b5b0      	push	{r4, r5, r7, lr}
 800368a:	b08e      	sub	sp, #56	; 0x38
 800368c:	af00      	add	r7, sp, #0
 800368e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003690:	231a      	movs	r3, #26
 8003692:	2218      	movs	r2, #24
 8003694:	189b      	adds	r3, r3, r2
 8003696:	19db      	adds	r3, r3, r7
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	431a      	orrs	r2, r3
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	69db      	ldr	r3, [r3, #28]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4ac3      	ldr	r2, [pc, #780]	; (80039c8 <UART_SetConfig+0x340>)
 80036bc:	4013      	ands	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036c6:	430a      	orrs	r2, r1
 80036c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	4abe      	ldr	r2, [pc, #760]	; (80039cc <UART_SetConfig+0x344>)
 80036d2:	4013      	ands	r3, r2
 80036d4:	0019      	movs	r1, r3
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4ab8      	ldr	r2, [pc, #736]	; (80039d0 <UART_SetConfig+0x348>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d004      	beq.n	80036fc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036f8:	4313      	orrs	r3, r2
 80036fa:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	4ab4      	ldr	r2, [pc, #720]	; (80039d4 <UART_SetConfig+0x34c>)
 8003704:	4013      	ands	r3, r2
 8003706:	0019      	movs	r1, r3
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800370e:	430a      	orrs	r2, r1
 8003710:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4ab0      	ldr	r2, [pc, #704]	; (80039d8 <UART_SetConfig+0x350>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d131      	bne.n	8003780 <UART_SetConfig+0xf8>
 800371c:	4baf      	ldr	r3, [pc, #700]	; (80039dc <UART_SetConfig+0x354>)
 800371e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003720:	2203      	movs	r2, #3
 8003722:	4013      	ands	r3, r2
 8003724:	2b03      	cmp	r3, #3
 8003726:	d01d      	beq.n	8003764 <UART_SetConfig+0xdc>
 8003728:	d823      	bhi.n	8003772 <UART_SetConfig+0xea>
 800372a:	2b02      	cmp	r3, #2
 800372c:	d00c      	beq.n	8003748 <UART_SetConfig+0xc0>
 800372e:	d820      	bhi.n	8003772 <UART_SetConfig+0xea>
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <UART_SetConfig+0xb2>
 8003734:	2b01      	cmp	r3, #1
 8003736:	d00e      	beq.n	8003756 <UART_SetConfig+0xce>
 8003738:	e01b      	b.n	8003772 <UART_SetConfig+0xea>
 800373a:	231b      	movs	r3, #27
 800373c:	2218      	movs	r2, #24
 800373e:	189b      	adds	r3, r3, r2
 8003740:	19db      	adds	r3, r3, r7
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	e0b4      	b.n	80038b2 <UART_SetConfig+0x22a>
 8003748:	231b      	movs	r3, #27
 800374a:	2218      	movs	r2, #24
 800374c:	189b      	adds	r3, r3, r2
 800374e:	19db      	adds	r3, r3, r7
 8003750:	2202      	movs	r2, #2
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e0ad      	b.n	80038b2 <UART_SetConfig+0x22a>
 8003756:	231b      	movs	r3, #27
 8003758:	2218      	movs	r2, #24
 800375a:	189b      	adds	r3, r3, r2
 800375c:	19db      	adds	r3, r3, r7
 800375e:	2204      	movs	r2, #4
 8003760:	701a      	strb	r2, [r3, #0]
 8003762:	e0a6      	b.n	80038b2 <UART_SetConfig+0x22a>
 8003764:	231b      	movs	r3, #27
 8003766:	2218      	movs	r2, #24
 8003768:	189b      	adds	r3, r3, r2
 800376a:	19db      	adds	r3, r3, r7
 800376c:	2208      	movs	r2, #8
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	e09f      	b.n	80038b2 <UART_SetConfig+0x22a>
 8003772:	231b      	movs	r3, #27
 8003774:	2218      	movs	r2, #24
 8003776:	189b      	adds	r3, r3, r2
 8003778:	19db      	adds	r3, r3, r7
 800377a:	2210      	movs	r2, #16
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e098      	b.n	80038b2 <UART_SetConfig+0x22a>
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a96      	ldr	r2, [pc, #600]	; (80039e0 <UART_SetConfig+0x358>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d131      	bne.n	80037ee <UART_SetConfig+0x166>
 800378a:	4b94      	ldr	r3, [pc, #592]	; (80039dc <UART_SetConfig+0x354>)
 800378c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800378e:	220c      	movs	r2, #12
 8003790:	4013      	ands	r3, r2
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d01d      	beq.n	80037d2 <UART_SetConfig+0x14a>
 8003796:	d823      	bhi.n	80037e0 <UART_SetConfig+0x158>
 8003798:	2b08      	cmp	r3, #8
 800379a:	d00c      	beq.n	80037b6 <UART_SetConfig+0x12e>
 800379c:	d820      	bhi.n	80037e0 <UART_SetConfig+0x158>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <UART_SetConfig+0x120>
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	d00e      	beq.n	80037c4 <UART_SetConfig+0x13c>
 80037a6:	e01b      	b.n	80037e0 <UART_SetConfig+0x158>
 80037a8:	231b      	movs	r3, #27
 80037aa:	2218      	movs	r2, #24
 80037ac:	189b      	adds	r3, r3, r2
 80037ae:	19db      	adds	r3, r3, r7
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	e07d      	b.n	80038b2 <UART_SetConfig+0x22a>
 80037b6:	231b      	movs	r3, #27
 80037b8:	2218      	movs	r2, #24
 80037ba:	189b      	adds	r3, r3, r2
 80037bc:	19db      	adds	r3, r3, r7
 80037be:	2202      	movs	r2, #2
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e076      	b.n	80038b2 <UART_SetConfig+0x22a>
 80037c4:	231b      	movs	r3, #27
 80037c6:	2218      	movs	r2, #24
 80037c8:	189b      	adds	r3, r3, r2
 80037ca:	19db      	adds	r3, r3, r7
 80037cc:	2204      	movs	r2, #4
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	e06f      	b.n	80038b2 <UART_SetConfig+0x22a>
 80037d2:	231b      	movs	r3, #27
 80037d4:	2218      	movs	r2, #24
 80037d6:	189b      	adds	r3, r3, r2
 80037d8:	19db      	adds	r3, r3, r7
 80037da:	2208      	movs	r2, #8
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e068      	b.n	80038b2 <UART_SetConfig+0x22a>
 80037e0:	231b      	movs	r3, #27
 80037e2:	2218      	movs	r2, #24
 80037e4:	189b      	adds	r3, r3, r2
 80037e6:	19db      	adds	r3, r3, r7
 80037e8:	2210      	movs	r2, #16
 80037ea:	701a      	strb	r2, [r3, #0]
 80037ec:	e061      	b.n	80038b2 <UART_SetConfig+0x22a>
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a7c      	ldr	r2, [pc, #496]	; (80039e4 <UART_SetConfig+0x35c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d106      	bne.n	8003806 <UART_SetConfig+0x17e>
 80037f8:	231b      	movs	r3, #27
 80037fa:	2218      	movs	r2, #24
 80037fc:	189b      	adds	r3, r3, r2
 80037fe:	19db      	adds	r3, r3, r7
 8003800:	2200      	movs	r2, #0
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	e055      	b.n	80038b2 <UART_SetConfig+0x22a>
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a77      	ldr	r2, [pc, #476]	; (80039e8 <UART_SetConfig+0x360>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d106      	bne.n	800381e <UART_SetConfig+0x196>
 8003810:	231b      	movs	r3, #27
 8003812:	2218      	movs	r2, #24
 8003814:	189b      	adds	r3, r3, r2
 8003816:	19db      	adds	r3, r3, r7
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e049      	b.n	80038b2 <UART_SetConfig+0x22a>
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6b      	ldr	r2, [pc, #428]	; (80039d0 <UART_SetConfig+0x348>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d13e      	bne.n	80038a6 <UART_SetConfig+0x21e>
 8003828:	4b6c      	ldr	r3, [pc, #432]	; (80039dc <UART_SetConfig+0x354>)
 800382a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800382c:	23c0      	movs	r3, #192	; 0xc0
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	4013      	ands	r3, r2
 8003832:	22c0      	movs	r2, #192	; 0xc0
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	4293      	cmp	r3, r2
 8003838:	d027      	beq.n	800388a <UART_SetConfig+0x202>
 800383a:	22c0      	movs	r2, #192	; 0xc0
 800383c:	0112      	lsls	r2, r2, #4
 800383e:	4293      	cmp	r3, r2
 8003840:	d82a      	bhi.n	8003898 <UART_SetConfig+0x210>
 8003842:	2280      	movs	r2, #128	; 0x80
 8003844:	0112      	lsls	r2, r2, #4
 8003846:	4293      	cmp	r3, r2
 8003848:	d011      	beq.n	800386e <UART_SetConfig+0x1e6>
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	0112      	lsls	r2, r2, #4
 800384e:	4293      	cmp	r3, r2
 8003850:	d822      	bhi.n	8003898 <UART_SetConfig+0x210>
 8003852:	2b00      	cmp	r3, #0
 8003854:	d004      	beq.n	8003860 <UART_SetConfig+0x1d8>
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	00d2      	lsls	r2, r2, #3
 800385a:	4293      	cmp	r3, r2
 800385c:	d00e      	beq.n	800387c <UART_SetConfig+0x1f4>
 800385e:	e01b      	b.n	8003898 <UART_SetConfig+0x210>
 8003860:	231b      	movs	r3, #27
 8003862:	2218      	movs	r2, #24
 8003864:	189b      	adds	r3, r3, r2
 8003866:	19db      	adds	r3, r3, r7
 8003868:	2200      	movs	r2, #0
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	e021      	b.n	80038b2 <UART_SetConfig+0x22a>
 800386e:	231b      	movs	r3, #27
 8003870:	2218      	movs	r2, #24
 8003872:	189b      	adds	r3, r3, r2
 8003874:	19db      	adds	r3, r3, r7
 8003876:	2202      	movs	r2, #2
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	e01a      	b.n	80038b2 <UART_SetConfig+0x22a>
 800387c:	231b      	movs	r3, #27
 800387e:	2218      	movs	r2, #24
 8003880:	189b      	adds	r3, r3, r2
 8003882:	19db      	adds	r3, r3, r7
 8003884:	2204      	movs	r2, #4
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e013      	b.n	80038b2 <UART_SetConfig+0x22a>
 800388a:	231b      	movs	r3, #27
 800388c:	2218      	movs	r2, #24
 800388e:	189b      	adds	r3, r3, r2
 8003890:	19db      	adds	r3, r3, r7
 8003892:	2208      	movs	r2, #8
 8003894:	701a      	strb	r2, [r3, #0]
 8003896:	e00c      	b.n	80038b2 <UART_SetConfig+0x22a>
 8003898:	231b      	movs	r3, #27
 800389a:	2218      	movs	r2, #24
 800389c:	189b      	adds	r3, r3, r2
 800389e:	19db      	adds	r3, r3, r7
 80038a0:	2210      	movs	r2, #16
 80038a2:	701a      	strb	r2, [r3, #0]
 80038a4:	e005      	b.n	80038b2 <UART_SetConfig+0x22a>
 80038a6:	231b      	movs	r3, #27
 80038a8:	2218      	movs	r2, #24
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	19db      	adds	r3, r3, r7
 80038ae:	2210      	movs	r2, #16
 80038b0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a46      	ldr	r2, [pc, #280]	; (80039d0 <UART_SetConfig+0x348>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d000      	beq.n	80038be <UART_SetConfig+0x236>
 80038bc:	e09a      	b.n	80039f4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038be:	231b      	movs	r3, #27
 80038c0:	2218      	movs	r2, #24
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	19db      	adds	r3, r3, r7
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d01d      	beq.n	8003908 <UART_SetConfig+0x280>
 80038cc:	dc20      	bgt.n	8003910 <UART_SetConfig+0x288>
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d015      	beq.n	80038fe <UART_SetConfig+0x276>
 80038d2:	dc1d      	bgt.n	8003910 <UART_SetConfig+0x288>
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <UART_SetConfig+0x256>
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d005      	beq.n	80038e8 <UART_SetConfig+0x260>
 80038dc:	e018      	b.n	8003910 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038de:	f7fe fd3f 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 80038e2:	0003      	movs	r3, r0
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038e6:	e01c      	b.n	8003922 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038e8:	4b3c      	ldr	r3, [pc, #240]	; (80039dc <UART_SetConfig+0x354>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2210      	movs	r2, #16
 80038ee:	4013      	ands	r3, r2
 80038f0:	d002      	beq.n	80038f8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80038f2:	4b3e      	ldr	r3, [pc, #248]	; (80039ec <UART_SetConfig+0x364>)
 80038f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80038f6:	e014      	b.n	8003922 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80038f8:	4b3d      	ldr	r3, [pc, #244]	; (80039f0 <UART_SetConfig+0x368>)
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038fc:	e011      	b.n	8003922 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fe:	f7fe fc7f 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 8003902:	0003      	movs	r3, r0
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003906:	e00c      	b.n	8003922 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003908:	2380      	movs	r3, #128	; 0x80
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800390e:	e008      	b.n	8003922 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003914:	231a      	movs	r3, #26
 8003916:	2218      	movs	r2, #24
 8003918:	189b      	adds	r3, r3, r2
 800391a:	19db      	adds	r3, r3, r7
 800391c:	2201      	movs	r2, #1
 800391e:	701a      	strb	r2, [r3, #0]
        break;
 8003920:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d100      	bne.n	800392a <UART_SetConfig+0x2a2>
 8003928:	e134      	b.n	8003b94 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	0013      	movs	r3, r2
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	189b      	adds	r3, r3, r2
 8003934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003936:	429a      	cmp	r2, r3
 8003938:	d305      	bcc.n	8003946 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003942:	429a      	cmp	r2, r3
 8003944:	d906      	bls.n	8003954 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003946:	231a      	movs	r3, #26
 8003948:	2218      	movs	r2, #24
 800394a:	189b      	adds	r3, r3, r2
 800394c:	19db      	adds	r3, r3, r7
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
 8003952:	e11f      	b.n	8003b94 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
 800395c:	6939      	ldr	r1, [r7, #16]
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	000b      	movs	r3, r1
 8003962:	0e1b      	lsrs	r3, r3, #24
 8003964:	0010      	movs	r0, r2
 8003966:	0205      	lsls	r5, r0, #8
 8003968:	431d      	orrs	r5, r3
 800396a:	000b      	movs	r3, r1
 800396c:	021c      	lsls	r4, r3, #8
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	68b8      	ldr	r0, [r7, #8]
 800397c:	68f9      	ldr	r1, [r7, #12]
 800397e:	1900      	adds	r0, r0, r4
 8003980:	4169      	adcs	r1, r5
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	2300      	movs	r3, #0
 800398a:	607b      	str	r3, [r7, #4]
 800398c:	683a      	ldr	r2, [r7, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f7fc fc46 	bl	8000220 <__aeabi_uldivmod>
 8003994:	0002      	movs	r2, r0
 8003996:	000b      	movs	r3, r1
 8003998:	0013      	movs	r3, r2
 800399a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800399c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399e:	23c0      	movs	r3, #192	; 0xc0
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d309      	bcc.n	80039ba <UART_SetConfig+0x332>
 80039a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	035b      	lsls	r3, r3, #13
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d204      	bcs.n	80039ba <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039b6:	60da      	str	r2, [r3, #12]
 80039b8:	e0ec      	b.n	8003b94 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80039ba:	231a      	movs	r3, #26
 80039bc:	2218      	movs	r2, #24
 80039be:	189b      	adds	r3, r3, r2
 80039c0:	19db      	adds	r3, r3, r7
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
 80039c6:	e0e5      	b.n	8003b94 <UART_SetConfig+0x50c>
 80039c8:	efff69f3 	.word	0xefff69f3
 80039cc:	ffffcfff 	.word	0xffffcfff
 80039d0:	40004800 	.word	0x40004800
 80039d4:	fffff4ff 	.word	0xfffff4ff
 80039d8:	40013800 	.word	0x40013800
 80039dc:	40021000 	.word	0x40021000
 80039e0:	40004400 	.word	0x40004400
 80039e4:	40004c00 	.word	0x40004c00
 80039e8:	40005000 	.word	0x40005000
 80039ec:	003d0900 	.word	0x003d0900
 80039f0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d000      	beq.n	8003a02 <UART_SetConfig+0x37a>
 8003a00:	e071      	b.n	8003ae6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003a02:	231b      	movs	r3, #27
 8003a04:	2218      	movs	r2, #24
 8003a06:	189b      	adds	r3, r3, r2
 8003a08:	19db      	adds	r3, r3, r7
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d822      	bhi.n	8003a56 <UART_SetConfig+0x3ce>
 8003a10:	009a      	lsls	r2, r3, #2
 8003a12:	4b68      	ldr	r3, [pc, #416]	; (8003bb4 <UART_SetConfig+0x52c>)
 8003a14:	18d3      	adds	r3, r2, r3
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1a:	f7fe fca1 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003a1e:	0003      	movs	r3, r0
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a22:	e021      	b.n	8003a68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7fe fcb2 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a2c:	e01c      	b.n	8003a68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a2e:	4b62      	ldr	r3, [pc, #392]	; (8003bb8 <UART_SetConfig+0x530>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2210      	movs	r2, #16
 8003a34:	4013      	ands	r3, r2
 8003a36:	d002      	beq.n	8003a3e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a38:	4b60      	ldr	r3, [pc, #384]	; (8003bbc <UART_SetConfig+0x534>)
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a3c:	e014      	b.n	8003a68 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003a3e:	4b60      	ldr	r3, [pc, #384]	; (8003bc0 <UART_SetConfig+0x538>)
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a42:	e011      	b.n	8003a68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a44:	f7fe fbdc 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a4c:	e00c      	b.n	8003a68 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	021b      	lsls	r3, r3, #8
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a54:	e008      	b.n	8003a68 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003a5a:	231a      	movs	r3, #26
 8003a5c:	2218      	movs	r2, #24
 8003a5e:	189b      	adds	r3, r3, r2
 8003a60:	19db      	adds	r3, r3, r7
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
        break;
 8003a66:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d100      	bne.n	8003a70 <UART_SetConfig+0x3e8>
 8003a6e:	e091      	b.n	8003b94 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a72:	005a      	lsls	r2, r3, #1
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	085b      	lsrs	r3, r3, #1
 8003a7a:	18d2      	adds	r2, r2, r3
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	0019      	movs	r1, r3
 8003a82:	0010      	movs	r0, r2
 8003a84:	f7fc fb40 	bl	8000108 <__udivsi3>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	2b0f      	cmp	r3, #15
 8003a92:	d921      	bls.n	8003ad8 <UART_SetConfig+0x450>
 8003a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	025b      	lsls	r3, r3, #9
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d21c      	bcs.n	8003ad8 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	200e      	movs	r0, #14
 8003aa4:	2418      	movs	r4, #24
 8003aa6:	1903      	adds	r3, r0, r4
 8003aa8:	19db      	adds	r3, r3, r7
 8003aaa:	210f      	movs	r1, #15
 8003aac:	438a      	bics	r2, r1
 8003aae:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	085b      	lsrs	r3, r3, #1
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2207      	movs	r2, #7
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b299      	uxth	r1, r3
 8003abc:	1903      	adds	r3, r0, r4
 8003abe:	19db      	adds	r3, r3, r7
 8003ac0:	1902      	adds	r2, r0, r4
 8003ac2:	19d2      	adds	r2, r2, r7
 8003ac4:	8812      	ldrh	r2, [r2, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	1902      	adds	r2, r0, r4
 8003ad0:	19d2      	adds	r2, r2, r7
 8003ad2:	8812      	ldrh	r2, [r2, #0]
 8003ad4:	60da      	str	r2, [r3, #12]
 8003ad6:	e05d      	b.n	8003b94 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ad8:	231a      	movs	r3, #26
 8003ada:	2218      	movs	r2, #24
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	701a      	strb	r2, [r3, #0]
 8003ae4:	e056      	b.n	8003b94 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ae6:	231b      	movs	r3, #27
 8003ae8:	2218      	movs	r2, #24
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	19db      	adds	r3, r3, r7
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d822      	bhi.n	8003b3a <UART_SetConfig+0x4b2>
 8003af4:	009a      	lsls	r2, r3, #2
 8003af6:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <UART_SetConfig+0x53c>)
 8003af8:	18d3      	adds	r3, r2, r3
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003afe:	f7fe fc2f 	bl	8002360 <HAL_RCC_GetPCLK1Freq>
 8003b02:	0003      	movs	r3, r0
 8003b04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b06:	e021      	b.n	8003b4c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b08:	f7fe fc40 	bl	800238c <HAL_RCC_GetPCLK2Freq>
 8003b0c:	0003      	movs	r3, r0
 8003b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b10:	e01c      	b.n	8003b4c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b12:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <UART_SetConfig+0x530>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2210      	movs	r2, #16
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d002      	beq.n	8003b22 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003b1c:	4b27      	ldr	r3, [pc, #156]	; (8003bbc <UART_SetConfig+0x534>)
 8003b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003b20:	e014      	b.n	8003b4c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8003b22:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <UART_SetConfig+0x538>)
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b26:	e011      	b.n	8003b4c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b28:	f7fe fb6a 	bl	8002200 <HAL_RCC_GetSysClockFreq>
 8003b2c:	0003      	movs	r3, r0
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b30:	e00c      	b.n	8003b4c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b32:	2380      	movs	r3, #128	; 0x80
 8003b34:	021b      	lsls	r3, r3, #8
 8003b36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003b38:	e008      	b.n	8003b4c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003b3e:	231a      	movs	r3, #26
 8003b40:	2218      	movs	r2, #24
 8003b42:	189b      	adds	r3, r3, r2
 8003b44:	19db      	adds	r3, r3, r7
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
        break;
 8003b4a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d020      	beq.n	8003b94 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	085a      	lsrs	r2, r3, #1
 8003b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5a:	18d2      	adds	r2, r2, r3
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	0019      	movs	r1, r3
 8003b62:	0010      	movs	r0, r2
 8003b64:	f7fc fad0 	bl	8000108 <__udivsi3>
 8003b68:	0003      	movs	r3, r0
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b70:	2b0f      	cmp	r3, #15
 8003b72:	d909      	bls.n	8003b88 <UART_SetConfig+0x500>
 8003b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	025b      	lsls	r3, r3, #9
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d204      	bcs.n	8003b88 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b84:	60da      	str	r2, [r3, #12]
 8003b86:	e005      	b.n	8003b94 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b88:	231a      	movs	r3, #26
 8003b8a:	2218      	movs	r2, #24
 8003b8c:	189b      	adds	r3, r3, r2
 8003b8e:	19db      	adds	r3, r3, r7
 8003b90:	2201      	movs	r2, #1
 8003b92:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2200      	movs	r2, #0
 8003b98:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003ba0:	231a      	movs	r3, #26
 8003ba2:	2218      	movs	r2, #24
 8003ba4:	189b      	adds	r3, r3, r2
 8003ba6:	19db      	adds	r3, r3, r7
 8003ba8:	781b      	ldrb	r3, [r3, #0]
}
 8003baa:	0018      	movs	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b00e      	add	sp, #56	; 0x38
 8003bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	08004134 	.word	0x08004134
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	003d0900 	.word	0x003d0900
 8003bc0:	00f42400 	.word	0x00f42400
 8003bc4:	08004158 	.word	0x08004158

08003bc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	4a4a      	ldr	r2, [pc, #296]	; (8003d0c <UART_AdvFeatureConfig+0x144>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	0019      	movs	r1, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	2202      	movs	r2, #2
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d00b      	beq.n	8003c14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	4a43      	ldr	r2, [pc, #268]	; (8003d10 <UART_AdvFeatureConfig+0x148>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	0019      	movs	r1, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	2204      	movs	r2, #4
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d00b      	beq.n	8003c36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a3b      	ldr	r2, [pc, #236]	; (8003d14 <UART_AdvFeatureConfig+0x14c>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	0019      	movs	r1, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	2208      	movs	r2, #8
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d00b      	beq.n	8003c58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	4a34      	ldr	r2, [pc, #208]	; (8003d18 <UART_AdvFeatureConfig+0x150>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	0019      	movs	r1, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4a2c      	ldr	r2, [pc, #176]	; (8003d1c <UART_AdvFeatureConfig+0x154>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	0019      	movs	r1, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	2220      	movs	r2, #32
 8003c80:	4013      	ands	r3, r2
 8003c82:	d00b      	beq.n	8003c9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	4a25      	ldr	r2, [pc, #148]	; (8003d20 <UART_AdvFeatureConfig+0x158>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	0019      	movs	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	2240      	movs	r2, #64	; 0x40
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d01d      	beq.n	8003ce2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <UART_AdvFeatureConfig+0x15c>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	035b      	lsls	r3, r3, #13
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d10b      	bne.n	8003ce2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4a15      	ldr	r2, [pc, #84]	; (8003d28 <UART_AdvFeatureConfig+0x160>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	2280      	movs	r2, #128	; 0x80
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d00b      	beq.n	8003d04 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <UART_AdvFeatureConfig+0x164>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0019      	movs	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	430a      	orrs	r2, r1
 8003d02:	605a      	str	r2, [r3, #4]
  }
}
 8003d04:	46c0      	nop			; (mov r8, r8)
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	fffdffff 	.word	0xfffdffff
 8003d10:	fffeffff 	.word	0xfffeffff
 8003d14:	fffbffff 	.word	0xfffbffff
 8003d18:	ffff7fff 	.word	0xffff7fff
 8003d1c:	ffffefff 	.word	0xffffefff
 8003d20:	ffffdfff 	.word	0xffffdfff
 8003d24:	ffefffff 	.word	0xffefffff
 8003d28:	ff9fffff 	.word	0xff9fffff
 8003d2c:	fff7ffff 	.word	0xfff7ffff

08003d30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2280      	movs	r2, #128	; 0x80
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003d40:	f7fd f9fe 	bl	8001140 <HAL_GetTick>
 8003d44:	0003      	movs	r3, r0
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2208      	movs	r2, #8
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b08      	cmp	r3, #8
 8003d54:	d10c      	bne.n	8003d70 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	0391      	lsls	r1, r2, #14
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <UART_CheckIdleState+0x8c>)
 8003d60:	9200      	str	r2, [sp, #0]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f000 f82c 	bl	8003dc0 <UART_WaitOnFlagUntilTimeout>
 8003d68:	1e03      	subs	r3, r0, #0
 8003d6a:	d001      	beq.n	8003d70 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e021      	b.n	8003db4 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2204      	movs	r2, #4
 8003d78:	4013      	ands	r3, r2
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	d10c      	bne.n	8003d98 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2280      	movs	r2, #128	; 0x80
 8003d82:	03d1      	lsls	r1, r2, #15
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4a0d      	ldr	r2, [pc, #52]	; (8003dbc <UART_CheckIdleState+0x8c>)
 8003d88:	9200      	str	r2, [sp, #0]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f000 f818 	bl	8003dc0 <UART_WaitOnFlagUntilTimeout>
 8003d90:	1e03      	subs	r3, r0, #0
 8003d92:	d001      	beq.n	8003d98 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e00d      	b.n	8003db4 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2274      	movs	r2, #116	; 0x74
 8003dae:	2100      	movs	r1, #0
 8003db0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	0018      	movs	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b004      	add	sp, #16
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	01ffffff 	.word	0x01ffffff

08003dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b094      	sub	sp, #80	; 0x50
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	1dfb      	adds	r3, r7, #7
 8003dce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd0:	e0a3      	b.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	d100      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0x1a>
 8003dd8:	e09f      	b.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dda:	f7fd f9b1 	bl	8001140 <HAL_GetTick>
 8003dde:	0002      	movs	r2, r0
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d13d      	bne.n	8003e6c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df0:	f3ef 8310 	mrs	r3, PRIMASK
 8003df4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003df8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	f383 8810 	msr	PRIMASK, r3
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	494c      	ldr	r1, [pc, #304]	; (8003f44 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003e12:	400a      	ands	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e18:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1c:	f383 8810 	msr	PRIMASK, r3
}
 8003e20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e22:	f3ef 8310 	mrs	r3, PRIMASK
 8003e26:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003e28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e32:	f383 8810 	msr	PRIMASK, r3
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2101      	movs	r1, #1
 8003e44:	438a      	bics	r2, r1
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e4e:	f383 8810 	msr	PRIMASK, r3
}
 8003e52:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2274      	movs	r2, #116	; 0x74
 8003e64:	2100      	movs	r1, #0
 8003e66:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e067      	b.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2204      	movs	r2, #4
 8003e74:	4013      	ands	r3, r2
 8003e76:	d050      	beq.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	69da      	ldr	r2, [r3, #28]
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	401a      	ands	r2, r3
 8003e84:	2380      	movs	r3, #128	; 0x80
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d146      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	0112      	lsls	r2, r2, #4
 8003e94:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e96:	f3ef 8310 	mrs	r3, PRIMASK
 8003e9a:	613b      	str	r3, [r7, #16]
  return(result);
 8003e9c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f383 8810 	msr	PRIMASK, r3
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4923      	ldr	r1, [pc, #140]	; (8003f44 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003eb8:	400a      	ands	r2, r1
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f383 8810 	msr	PRIMASK, r3
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ec8:	f3ef 8310 	mrs	r3, PRIMASK
 8003ecc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ece:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f383 8810 	msr	PRIMASK, r3
}
 8003edc:	46c0      	nop			; (mov r8, r8)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2101      	movs	r1, #1
 8003eea:	438a      	bics	r2, r1
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef4:	f383 8810 	msr	PRIMASK, r3
}
 8003ef8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	2120      	movs	r1, #32
 8003f0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2274      	movs	r2, #116	; 0x74
 8003f12:	2100      	movs	r1, #0
 8003f14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e010      	b.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69db      	ldr	r3, [r3, #28]
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	4013      	ands	r3, r2
 8003f24:	68ba      	ldr	r2, [r7, #8]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	425a      	negs	r2, r3
 8003f2a:	4153      	adcs	r3, r2
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	001a      	movs	r2, r3
 8003f30:	1dfb      	adds	r3, r7, #7
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d100      	bne.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003f38:	e74b      	b.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
}
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	b014      	add	sp, #80	; 0x50
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	fffffe5f 	.word	0xfffffe5f

08003f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08e      	sub	sp, #56	; 0x38
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f50:	f3ef 8310 	mrs	r3, PRIMASK
 8003f54:	617b      	str	r3, [r7, #20]
  return(result);
 8003f56:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f58:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f383 8810 	msr	PRIMASK, r3
}
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4925      	ldr	r1, [pc, #148]	; (8004008 <UART_EndRxTransfer+0xc0>)
 8003f72:	400a      	ands	r2, r1
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f383 8810 	msr	PRIMASK, r3
}
 8003f80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f82:	f3ef 8310 	mrs	r3, PRIMASK
 8003f86:	623b      	str	r3, [r7, #32]
  return(result);
 8003f88:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	f383 8810 	msr	PRIMASK, r3
}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	438a      	bics	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	f383 8810 	msr	PRIMASK, r3
}
 8003fb2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d118      	bne.n	8003fee <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fc2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f383 8810 	msr	PRIMASK, r3
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2110      	movs	r1, #16
 8003fde:	438a      	bics	r2, r1
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004000:	46c0      	nop			; (mov r8, r8)
 8004002:	46bd      	mov	sp, r7
 8004004:	b00e      	add	sp, #56	; 0x38
 8004006:	bd80      	pop	{r7, pc}
 8004008:	fffffedf 	.word	0xfffffedf

0800400c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004018:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	225a      	movs	r2, #90	; 0x5a
 800401e:	2100      	movs	r1, #0
 8004020:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2252      	movs	r2, #82	; 0x52
 8004026:	2100      	movs	r1, #0
 8004028:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	0018      	movs	r0, r3
 800402e:	f7ff fb17 	bl	8003660 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	46bd      	mov	sp, r7
 8004036:	b004      	add	sp, #16
 8004038:	bd80      	pop	{r7, pc}

0800403a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b086      	sub	sp, #24
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004042:	f3ef 8310 	mrs	r3, PRIMASK
 8004046:	60bb      	str	r3, [r7, #8]
  return(result);
 8004048:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	2301      	movs	r3, #1
 800404e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f383 8810 	msr	PRIMASK, r3
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2140      	movs	r1, #64	; 0x40
 8004064:	438a      	bics	r2, r1
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f383 8810 	msr	PRIMASK, r3
}
 8004072:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2220      	movs	r2, #32
 8004078:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	0018      	movs	r0, r3
 8004084:	f7ff fae4 	bl	8003650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004088:	46c0      	nop			; (mov r8, r8)
 800408a:	46bd      	mov	sp, r7
 800408c:	b006      	add	sp, #24
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004098:	46c0      	nop			; (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	b002      	add	sp, #8
 800409e:	bd80      	pop	{r7, pc}

080040a0 <__libc_init_array>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	2600      	movs	r6, #0
 80040a4:	4d0c      	ldr	r5, [pc, #48]	; (80040d8 <__libc_init_array+0x38>)
 80040a6:	4c0d      	ldr	r4, [pc, #52]	; (80040dc <__libc_init_array+0x3c>)
 80040a8:	1b64      	subs	r4, r4, r5
 80040aa:	10a4      	asrs	r4, r4, #2
 80040ac:	42a6      	cmp	r6, r4
 80040ae:	d109      	bne.n	80040c4 <__libc_init_array+0x24>
 80040b0:	2600      	movs	r6, #0
 80040b2:	f000 f821 	bl	80040f8 <_init>
 80040b6:	4d0a      	ldr	r5, [pc, #40]	; (80040e0 <__libc_init_array+0x40>)
 80040b8:	4c0a      	ldr	r4, [pc, #40]	; (80040e4 <__libc_init_array+0x44>)
 80040ba:	1b64      	subs	r4, r4, r5
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	42a6      	cmp	r6, r4
 80040c0:	d105      	bne.n	80040ce <__libc_init_array+0x2e>
 80040c2:	bd70      	pop	{r4, r5, r6, pc}
 80040c4:	00b3      	lsls	r3, r6, #2
 80040c6:	58eb      	ldr	r3, [r5, r3]
 80040c8:	4798      	blx	r3
 80040ca:	3601      	adds	r6, #1
 80040cc:	e7ee      	b.n	80040ac <__libc_init_array+0xc>
 80040ce:	00b3      	lsls	r3, r6, #2
 80040d0:	58eb      	ldr	r3, [r5, r3]
 80040d2:	4798      	blx	r3
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7f2      	b.n	80040be <__libc_init_array+0x1e>
 80040d8:	08004184 	.word	0x08004184
 80040dc:	08004184 	.word	0x08004184
 80040e0:	08004184 	.word	0x08004184
 80040e4:	08004188 	.word	0x08004188

080040e8 <memset>:
 80040e8:	0003      	movs	r3, r0
 80040ea:	1882      	adds	r2, r0, r2
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d100      	bne.n	80040f2 <memset+0xa>
 80040f0:	4770      	bx	lr
 80040f2:	7019      	strb	r1, [r3, #0]
 80040f4:	3301      	adds	r3, #1
 80040f6:	e7f9      	b.n	80040ec <memset+0x4>

080040f8 <_init>:
 80040f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040fe:	bc08      	pop	{r3}
 8004100:	469e      	mov	lr, r3
 8004102:	4770      	bx	lr

08004104 <_fini>:
 8004104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800410a:	bc08      	pop	{r3}
 800410c:	469e      	mov	lr, r3
 800410e:	4770      	bx	lr
